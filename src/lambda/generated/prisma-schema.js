module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `enum AccountStatus {
  ACTIVE
  PAST_DUE
  DELINQUENT
  REMOVED
  RESIGNED
  INACTIVE
  LIMITED
  LOCKED
}

enum AccountType {
  FULL
  ASSOCIATE
  EMERITUS
  GUEST
}

type ActivityLogItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  time: DateTime!
  message: String!
  messageCode: ActivityMessageCode!
  user: User!
  link: String
}

type ActivityLogItemConnection {
  pageInfo: PageInfo!
  edges: [ActivityLogItemEdge]!
  aggregate: AggregateActivityLogItem!
}

input ActivityLogItemCreateInput {
  id: ID
  time: DateTime!
  message: String!
  messageCode: ActivityMessageCode!
  user: UserCreateOneWithoutActivityLogInput!
  link: String
}

input ActivityLogItemCreateManyWithoutUserInput {
  create: [ActivityLogItemCreateWithoutUserInput!]
  connect: [ActivityLogItemWhereUniqueInput!]
}

input ActivityLogItemCreateWithoutUserInput {
  id: ID
  time: DateTime!
  message: String!
  messageCode: ActivityMessageCode!
  link: String
}

type ActivityLogItemEdge {
  node: ActivityLogItem!
  cursor: String!
}

enum ActivityLogItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  time_ASC
  time_DESC
  message_ASC
  message_DESC
  messageCode_ASC
  messageCode_DESC
  link_ASC
  link_DESC
}

type ActivityLogItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  time: DateTime!
  message: String!
  messageCode: ActivityMessageCode!
  link: String
}

input ActivityLogItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  messageCode: ActivityMessageCode
  messageCode_not: ActivityMessageCode
  messageCode_in: [ActivityMessageCode!]
  messageCode_not_in: [ActivityMessageCode!]
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  AND: [ActivityLogItemScalarWhereInput!]
  OR: [ActivityLogItemScalarWhereInput!]
  NOT: [ActivityLogItemScalarWhereInput!]
}

type ActivityLogItemSubscriptionPayload {
  mutation: MutationType!
  node: ActivityLogItem
  updatedFields: [String!]
  previousValues: ActivityLogItemPreviousValues
}

input ActivityLogItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActivityLogItemWhereInput
  AND: [ActivityLogItemSubscriptionWhereInput!]
  OR: [ActivityLogItemSubscriptionWhereInput!]
  NOT: [ActivityLogItemSubscriptionWhereInput!]
}

input ActivityLogItemUpdateInput {
  time: DateTime
  message: String
  messageCode: ActivityMessageCode
  user: UserUpdateOneRequiredWithoutActivityLogInput
  link: String
}

input ActivityLogItemUpdateManyDataInput {
  time: DateTime
  message: String
  messageCode: ActivityMessageCode
  link: String
}

input ActivityLogItemUpdateManyMutationInput {
  time: DateTime
  message: String
  messageCode: ActivityMessageCode
  link: String
}

input ActivityLogItemUpdateManyWithoutUserInput {
  create: [ActivityLogItemCreateWithoutUserInput!]
  delete: [ActivityLogItemWhereUniqueInput!]
  connect: [ActivityLogItemWhereUniqueInput!]
  set: [ActivityLogItemWhereUniqueInput!]
  disconnect: [ActivityLogItemWhereUniqueInput!]
  update: [ActivityLogItemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ActivityLogItemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ActivityLogItemScalarWhereInput!]
  updateMany: [ActivityLogItemUpdateManyWithWhereNestedInput!]
}

input ActivityLogItemUpdateManyWithWhereNestedInput {
  where: ActivityLogItemScalarWhereInput!
  data: ActivityLogItemUpdateManyDataInput!
}

input ActivityLogItemUpdateWithoutUserDataInput {
  time: DateTime
  message: String
  messageCode: ActivityMessageCode
  link: String
}

input ActivityLogItemUpdateWithWhereUniqueWithoutUserInput {
  where: ActivityLogItemWhereUniqueInput!
  data: ActivityLogItemUpdateWithoutUserDataInput!
}

input ActivityLogItemUpsertWithWhereUniqueWithoutUserInput {
  where: ActivityLogItemWhereUniqueInput!
  update: ActivityLogItemUpdateWithoutUserDataInput!
  create: ActivityLogItemCreateWithoutUserInput!
}

input ActivityLogItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  messageCode: ActivityMessageCode
  messageCode_not: ActivityMessageCode
  messageCode_in: [ActivityMessageCode!]
  messageCode_not_in: [ActivityMessageCode!]
  user: UserWhereInput
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  AND: [ActivityLogItemWhereInput!]
  OR: [ActivityLogItemWhereInput!]
  NOT: [ActivityLogItemWhereInput!]
}

input ActivityLogItemWhereUniqueInput {
  id: ID
}

enum ActivityMessageCode {
  EVENT_ATTENDED
  RUN_LEAD
  EVENT_REVIEW_SUBMITTED
  RUN_REPORT_SUBMITTED
  GALLERY_PHOTO_SUBMITTED
  GALLERY_PHOTOS_SUBMITTED
  PROFILE_PHOTO_SUBMITTED
  RIGBOOK_PHOTO_SUBMITTED
  JOINED
}

type AggregateActivityLogItem {
  count: Int!
}

type AggregateBallot {
  count: Int!
}

type AggregateBandaid {
  count: Int!
}

type AggregateCloudinaryImage {
  count: Int!
}

type AggregateCondition {
  count: Int!
}

type AggregateContactInfo {
  count: Int!
}

type AggregateElection {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateMembershipLogItem {
  count: Int!
}

type AggregatePreference {
  count: Int!
}

type AggregateRegistration {
  count: Int!
}

type AggregateRigImage {
  count: Int!
}

type AggregateRSVP {
  count: Int!
}

type AggregateRunReport {
  count: Int!
}

type AggregateTrail {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserMeta {
  count: Int!
}

type AggregateVehicle {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type Ballot {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  desc: String
  candidates(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type BallotConnection {
  pageInfo: PageInfo!
  edges: [BallotEdge]!
  aggregate: AggregateBallot!
}

input BallotCreateInput {
  id: ID
  title: String!
  desc: String
  candidates: UserCreateManyWithoutCandidateForInput
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateManyInput {
  create: [BallotCreateInput!]
  connect: [BallotWhereUniqueInput!]
}

input BallotCreateManyWithoutCandidatesInput {
  create: [BallotCreateWithoutCandidatesInput!]
  connect: [BallotWhereUniqueInput!]
}

input BallotCreateOneWithoutVotesInput {
  create: BallotCreateWithoutVotesInput
  connect: BallotWhereUniqueInput
}

input BallotCreateWithoutCandidatesInput {
  id: ID
  title: String!
  desc: String
  votes: VoteCreateManyWithoutBallotInput
}

input BallotCreateWithoutVotesInput {
  id: ID
  title: String!
  desc: String
  candidates: UserCreateManyWithoutCandidateForInput
}

type BallotEdge {
  node: Ballot!
  cursor: String!
}

enum BallotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  desc_ASC
  desc_DESC
}

type BallotPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  desc: String
}

input BallotScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  AND: [BallotScalarWhereInput!]
  OR: [BallotScalarWhereInput!]
  NOT: [BallotScalarWhereInput!]
}

type BallotSubscriptionPayload {
  mutation: MutationType!
  node: Ballot
  updatedFields: [String!]
  previousValues: BallotPreviousValues
}

input BallotSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BallotWhereInput
  AND: [BallotSubscriptionWhereInput!]
  OR: [BallotSubscriptionWhereInput!]
  NOT: [BallotSubscriptionWhereInput!]
}

input BallotUpdateDataInput {
  title: String
  desc: String
  candidates: UserUpdateManyWithoutCandidateForInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateInput {
  title: String
  desc: String
  candidates: UserUpdateManyWithoutCandidateForInput
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateManyDataInput {
  title: String
  desc: String
}

input BallotUpdateManyInput {
  create: [BallotCreateInput!]
  update: [BallotUpdateWithWhereUniqueNestedInput!]
  upsert: [BallotUpsertWithWhereUniqueNestedInput!]
  delete: [BallotWhereUniqueInput!]
  connect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  disconnect: [BallotWhereUniqueInput!]
  deleteMany: [BallotScalarWhereInput!]
  updateMany: [BallotUpdateManyWithWhereNestedInput!]
}

input BallotUpdateManyMutationInput {
  title: String
  desc: String
}

input BallotUpdateManyWithoutCandidatesInput {
  create: [BallotCreateWithoutCandidatesInput!]
  delete: [BallotWhereUniqueInput!]
  connect: [BallotWhereUniqueInput!]
  set: [BallotWhereUniqueInput!]
  disconnect: [BallotWhereUniqueInput!]
  update: [BallotUpdateWithWhereUniqueWithoutCandidatesInput!]
  upsert: [BallotUpsertWithWhereUniqueWithoutCandidatesInput!]
  deleteMany: [BallotScalarWhereInput!]
  updateMany: [BallotUpdateManyWithWhereNestedInput!]
}

input BallotUpdateManyWithWhereNestedInput {
  where: BallotScalarWhereInput!
  data: BallotUpdateManyDataInput!
}

input BallotUpdateOneRequiredWithoutVotesInput {
  create: BallotCreateWithoutVotesInput
  update: BallotUpdateWithoutVotesDataInput
  upsert: BallotUpsertWithoutVotesInput
  connect: BallotWhereUniqueInput
}

input BallotUpdateWithoutCandidatesDataInput {
  title: String
  desc: String
  votes: VoteUpdateManyWithoutBallotInput
}

input BallotUpdateWithoutVotesDataInput {
  title: String
  desc: String
  candidates: UserUpdateManyWithoutCandidateForInput
}

input BallotUpdateWithWhereUniqueNestedInput {
  where: BallotWhereUniqueInput!
  data: BallotUpdateDataInput!
}

input BallotUpdateWithWhereUniqueWithoutCandidatesInput {
  where: BallotWhereUniqueInput!
  data: BallotUpdateWithoutCandidatesDataInput!
}

input BallotUpsertWithoutVotesInput {
  update: BallotUpdateWithoutVotesDataInput!
  create: BallotCreateWithoutVotesInput!
}

input BallotUpsertWithWhereUniqueNestedInput {
  where: BallotWhereUniqueInput!
  update: BallotUpdateDataInput!
  create: BallotCreateInput!
}

input BallotUpsertWithWhereUniqueWithoutCandidatesInput {
  where: BallotWhereUniqueInput!
  update: BallotUpdateWithoutCandidatesDataInput!
  create: BallotCreateWithoutCandidatesInput!
}

input BallotWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  candidates_every: UserWhereInput
  candidates_some: UserWhereInput
  candidates_none: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [BallotWhereInput!]
  OR: [BallotWhereInput!]
  NOT: [BallotWhereInput!]
}

input BallotWhereUniqueInput {
  id: ID
}

type Bandaid {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  event: Event
  memberInvolved: User
  title: String
  description: String
}

type BandaidConnection {
  pageInfo: PageInfo!
  edges: [BandaidEdge]!
  aggregate: AggregateBandaid!
}

input BandaidCreateInput {
  id: ID
  event: EventCreateOneWithoutBandaidsInput
  memberInvolved: UserCreateOneWithoutBandaidsInput
  title: String
  description: String
}

input BandaidCreateManyWithoutEventInput {
  create: [BandaidCreateWithoutEventInput!]
  connect: [BandaidWhereUniqueInput!]
}

input BandaidCreateManyWithoutMemberInvolvedInput {
  create: [BandaidCreateWithoutMemberInvolvedInput!]
  connect: [BandaidWhereUniqueInput!]
}

input BandaidCreateWithoutEventInput {
  id: ID
  memberInvolved: UserCreateOneWithoutBandaidsInput
  title: String
  description: String
}

input BandaidCreateWithoutMemberInvolvedInput {
  id: ID
  event: EventCreateOneWithoutBandaidsInput
  title: String
  description: String
}

type BandaidEdge {
  node: Bandaid!
  cursor: String!
}

enum BandaidOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type BandaidPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  title: String
  description: String
}

input BandaidScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [BandaidScalarWhereInput!]
  OR: [BandaidScalarWhereInput!]
  NOT: [BandaidScalarWhereInput!]
}

type BandaidSubscriptionPayload {
  mutation: MutationType!
  node: Bandaid
  updatedFields: [String!]
  previousValues: BandaidPreviousValues
}

input BandaidSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BandaidWhereInput
  AND: [BandaidSubscriptionWhereInput!]
  OR: [BandaidSubscriptionWhereInput!]
  NOT: [BandaidSubscriptionWhereInput!]
}

input BandaidUpdateInput {
  event: EventUpdateOneWithoutBandaidsInput
  memberInvolved: UserUpdateOneWithoutBandaidsInput
  title: String
  description: String
}

input BandaidUpdateManyDataInput {
  title: String
  description: String
}

input BandaidUpdateManyMutationInput {
  title: String
  description: String
}

input BandaidUpdateManyWithoutEventInput {
  create: [BandaidCreateWithoutEventInput!]
  delete: [BandaidWhereUniqueInput!]
  connect: [BandaidWhereUniqueInput!]
  set: [BandaidWhereUniqueInput!]
  disconnect: [BandaidWhereUniqueInput!]
  update: [BandaidUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [BandaidUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [BandaidScalarWhereInput!]
  updateMany: [BandaidUpdateManyWithWhereNestedInput!]
}

input BandaidUpdateManyWithoutMemberInvolvedInput {
  create: [BandaidCreateWithoutMemberInvolvedInput!]
  delete: [BandaidWhereUniqueInput!]
  connect: [BandaidWhereUniqueInput!]
  set: [BandaidWhereUniqueInput!]
  disconnect: [BandaidWhereUniqueInput!]
  update: [BandaidUpdateWithWhereUniqueWithoutMemberInvolvedInput!]
  upsert: [BandaidUpsertWithWhereUniqueWithoutMemberInvolvedInput!]
  deleteMany: [BandaidScalarWhereInput!]
  updateMany: [BandaidUpdateManyWithWhereNestedInput!]
}

input BandaidUpdateManyWithWhereNestedInput {
  where: BandaidScalarWhereInput!
  data: BandaidUpdateManyDataInput!
}

input BandaidUpdateWithoutEventDataInput {
  memberInvolved: UserUpdateOneWithoutBandaidsInput
  title: String
  description: String
}

input BandaidUpdateWithoutMemberInvolvedDataInput {
  event: EventUpdateOneWithoutBandaidsInput
  title: String
  description: String
}

input BandaidUpdateWithWhereUniqueWithoutEventInput {
  where: BandaidWhereUniqueInput!
  data: BandaidUpdateWithoutEventDataInput!
}

input BandaidUpdateWithWhereUniqueWithoutMemberInvolvedInput {
  where: BandaidWhereUniqueInput!
  data: BandaidUpdateWithoutMemberInvolvedDataInput!
}

input BandaidUpsertWithWhereUniqueWithoutEventInput {
  where: BandaidWhereUniqueInput!
  update: BandaidUpdateWithoutEventDataInput!
  create: BandaidCreateWithoutEventInput!
}

input BandaidUpsertWithWhereUniqueWithoutMemberInvolvedInput {
  where: BandaidWhereUniqueInput!
  update: BandaidUpdateWithoutMemberInvolvedDataInput!
  create: BandaidCreateWithoutMemberInvolvedInput!
}

input BandaidWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  event: EventWhereInput
  memberInvolved: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [BandaidWhereInput!]
  OR: [BandaidWhereInput!]
  NOT: [BandaidWhereInput!]
}

input BandaidWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type CloudinaryImage {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publicId: String!
  url: String
  smallUrl: String
}

type CloudinaryImageConnection {
  pageInfo: PageInfo!
  edges: [CloudinaryImageEdge]!
  aggregate: AggregateCloudinaryImage!
}

input CloudinaryImageCreateInput {
  id: ID
  publicId: String!
  url: String
  smallUrl: String
}

input CloudinaryImageCreateOneInput {
  create: CloudinaryImageCreateInput
  connect: CloudinaryImageWhereUniqueInput
}

type CloudinaryImageEdge {
  node: CloudinaryImage!
  cursor: String!
}

enum CloudinaryImageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publicId_ASC
  publicId_DESC
  url_ASC
  url_DESC
  smallUrl_ASC
  smallUrl_DESC
}

type CloudinaryImagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publicId: String!
  url: String
  smallUrl: String
}

type CloudinaryImageSubscriptionPayload {
  mutation: MutationType!
  node: CloudinaryImage
  updatedFields: [String!]
  previousValues: CloudinaryImagePreviousValues
}

input CloudinaryImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CloudinaryImageWhereInput
  AND: [CloudinaryImageSubscriptionWhereInput!]
  OR: [CloudinaryImageSubscriptionWhereInput!]
  NOT: [CloudinaryImageSubscriptionWhereInput!]
}

input CloudinaryImageUpdateDataInput {
  publicId: String
  url: String
  smallUrl: String
}

input CloudinaryImageUpdateInput {
  publicId: String
  url: String
  smallUrl: String
}

input CloudinaryImageUpdateManyMutationInput {
  publicId: String
  url: String
  smallUrl: String
}

input CloudinaryImageUpdateOneInput {
  create: CloudinaryImageCreateInput
  update: CloudinaryImageUpdateDataInput
  upsert: CloudinaryImageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CloudinaryImageWhereUniqueInput
}

input CloudinaryImageUpsertNestedInput {
  update: CloudinaryImageUpdateDataInput!
  create: CloudinaryImageCreateInput!
}

input CloudinaryImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publicId: String
  publicId_not: String
  publicId_in: [String!]
  publicId_not_in: [String!]
  publicId_lt: String
  publicId_lte: String
  publicId_gt: String
  publicId_gte: String
  publicId_contains: String
  publicId_not_contains: String
  publicId_starts_with: String
  publicId_not_starts_with: String
  publicId_ends_with: String
  publicId_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  smallUrl: String
  smallUrl_not: String
  smallUrl_in: [String!]
  smallUrl_not_in: [String!]
  smallUrl_lt: String
  smallUrl_lte: String
  smallUrl_gt: String
  smallUrl_gte: String
  smallUrl_contains: String
  smallUrl_not_contains: String
  smallUrl_starts_with: String
  smallUrl_not_starts_with: String
  smallUrl_ends_with: String
  smallUrl_not_ends_with: String
  AND: [CloudinaryImageWhereInput!]
  OR: [CloudinaryImageWhereInput!]
  NOT: [CloudinaryImageWhereInput!]
}

input CloudinaryImageWhereUniqueInput {
  id: ID
}

type Condition {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  report: RunReport!
  status: TrailCondition!
  notes: String
}

type ConditionConnection {
  pageInfo: PageInfo!
  edges: [ConditionEdge]!
  aggregate: AggregateCondition!
}

input ConditionCreateInput {
  id: ID
  report: RunReportCreateOneWithoutConditionInput!
  status: TrailCondition!
  notes: String
}

input ConditionCreateOneWithoutReportInput {
  create: ConditionCreateWithoutReportInput
  connect: ConditionWhereUniqueInput
}

input ConditionCreateWithoutReportInput {
  id: ID
  status: TrailCondition!
  notes: String
}

type ConditionEdge {
  node: Condition!
  cursor: String!
}

enum ConditionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  notes_ASC
  notes_DESC
}

type ConditionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: TrailCondition!
  notes: String
}

type ConditionSubscriptionPayload {
  mutation: MutationType!
  node: Condition
  updatedFields: [String!]
  previousValues: ConditionPreviousValues
}

input ConditionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConditionWhereInput
  AND: [ConditionSubscriptionWhereInput!]
  OR: [ConditionSubscriptionWhereInput!]
  NOT: [ConditionSubscriptionWhereInput!]
}

input ConditionUpdateInput {
  report: RunReportUpdateOneRequiredWithoutConditionInput
  status: TrailCondition
  notes: String
}

input ConditionUpdateManyMutationInput {
  status: TrailCondition
  notes: String
}

input ConditionUpdateOneWithoutReportInput {
  create: ConditionCreateWithoutReportInput
  update: ConditionUpdateWithoutReportDataInput
  upsert: ConditionUpsertWithoutReportInput
  delete: Boolean
  disconnect: Boolean
  connect: ConditionWhereUniqueInput
}

input ConditionUpdateWithoutReportDataInput {
  status: TrailCondition
  notes: String
}

input ConditionUpsertWithoutReportInput {
  update: ConditionUpdateWithoutReportDataInput!
  create: ConditionCreateWithoutReportInput!
}

input ConditionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  report: RunReportWhereInput
  status: TrailCondition
  status_not: TrailCondition
  status_in: [TrailCondition!]
  status_not_in: [TrailCondition!]
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  AND: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
}

input ConditionWhereUniqueInput {
  id: ID
}

type ContactInfo {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  user: User
  street: String
  city: String
  state: String
  zip: String
  phone: String!
}

type ContactInfoConnection {
  pageInfo: PageInfo!
  edges: [ContactInfoEdge]!
  aggregate: AggregateContactInfo!
}

input ContactInfoCreateInput {
  id: ID
  user: UserCreateOneWithoutContactInfoInput
  street: String
  city: String
  state: String
  zip: String
  phone: String!
}

input ContactInfoCreateOneWithoutUserInput {
  create: ContactInfoCreateWithoutUserInput
  connect: ContactInfoWhereUniqueInput
}

input ContactInfoCreateWithoutUserInput {
  id: ID
  street: String
  city: String
  state: String
  zip: String
  phone: String!
}

type ContactInfoEdge {
  node: ContactInfo!
  cursor: String!
}

enum ContactInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  phone_ASC
  phone_DESC
}

type ContactInfoPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  street: String
  city: String
  state: String
  zip: String
  phone: String!
}

type ContactInfoSubscriptionPayload {
  mutation: MutationType!
  node: ContactInfo
  updatedFields: [String!]
  previousValues: ContactInfoPreviousValues
}

input ContactInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactInfoWhereInput
  AND: [ContactInfoSubscriptionWhereInput!]
  OR: [ContactInfoSubscriptionWhereInput!]
  NOT: [ContactInfoSubscriptionWhereInput!]
}

input ContactInfoUpdateInput {
  user: UserUpdateOneWithoutContactInfoInput
  street: String
  city: String
  state: String
  zip: String
  phone: String
}

input ContactInfoUpdateManyMutationInput {
  street: String
  city: String
  state: String
  zip: String
  phone: String
}

input ContactInfoUpdateOneWithoutUserInput {
  create: ContactInfoCreateWithoutUserInput
  update: ContactInfoUpdateWithoutUserDataInput
  upsert: ContactInfoUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: ContactInfoWhereUniqueInput
}

input ContactInfoUpdateWithoutUserDataInput {
  street: String
  city: String
  state: String
  zip: String
  phone: String
}

input ContactInfoUpsertWithoutUserInput {
  update: ContactInfoUpdateWithoutUserDataInput!
  create: ContactInfoCreateWithoutUserInput!
}

input ContactInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
}

input ContactInfoWhereUniqueInput {
  id: ID
}

scalar DateTime

type Election {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  electionName: String!
  startTime: DateTime
  endTime: DateTime
  races(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ballot!]
}

type ElectionConnection {
  pageInfo: PageInfo!
  edges: [ElectionEdge]!
  aggregate: AggregateElection!
}

input ElectionCreateInput {
  id: ID
  electionName: String!
  startTime: DateTime
  endTime: DateTime
  races: BallotCreateManyInput
}

type ElectionEdge {
  node: Election!
  cursor: String!
}

enum ElectionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  electionName_ASC
  electionName_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
}

type ElectionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  electionName: String!
  startTime: DateTime
  endTime: DateTime
}

type ElectionSubscriptionPayload {
  mutation: MutationType!
  node: Election
  updatedFields: [String!]
  previousValues: ElectionPreviousValues
}

input ElectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ElectionWhereInput
  AND: [ElectionSubscriptionWhereInput!]
  OR: [ElectionSubscriptionWhereInput!]
  NOT: [ElectionSubscriptionWhereInput!]
}

input ElectionUpdateInput {
  electionName: String
  startTime: DateTime
  endTime: DateTime
  races: BallotUpdateManyInput
}

input ElectionUpdateManyMutationInput {
  electionName: String
  startTime: DateTime
  endTime: DateTime
}

input ElectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  electionName: String
  electionName_not: String
  electionName_in: [String!]
  electionName_not_in: [String!]
  electionName_lt: String
  electionName_lte: String
  electionName_gt: String
  electionName_gte: String
  electionName_contains: String
  electionName_not_contains: String
  electionName_starts_with: String
  electionName_not_starts_with: String
  electionName_ends_with: String
  electionName_not_ends_with: String
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  races_every: BallotWhereInput
  races_some: BallotWhereInput
  races_none: BallotWhereInput
  AND: [ElectionWhereInput!]
  OR: [ElectionWhereInput!]
  NOT: [ElectionWhereInput!]
}

input ElectionWhereUniqueInput {
  id: ID
}

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: EventType!
  title: String!
  creator: User!
  description: String
  featuredImage: CloudinaryImage
  startTime: DateTime
  endTime: DateTime
  host: User
  rsvps(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RSVP!]
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: Trail
  bandaids(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bandaid!]
  runReports(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport!]
  membersOnly: Boolean
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  type: EventType!
  title: String!
  creator: UserCreateOneWithoutEventsCreatedInput!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
  membersOnly: Boolean
}

input EventCreateManyWithoutCreatorInput {
  create: [EventCreateWithoutCreatorInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutHostInput {
  create: [EventCreateWithoutHostInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutTrailInput {
  create: [EventCreateWithoutTrailInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneWithoutBandaidsInput {
  create: EventCreateWithoutBandaidsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutRsvpsInput {
  create: EventCreateWithoutRsvpsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutRunReportsInput {
  create: EventCreateWithoutRunReportsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutBandaidsInput {
  id: ID
  type: EventType!
  title: String!
  creator: UserCreateOneWithoutEventsCreatedInput!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailCreateOneWithoutPastEventsInput
  runReports: RunReportCreateManyWithoutEventInput
  membersOnly: Boolean
}

input EventCreateWithoutCreatorInput {
  id: ID
  type: EventType!
  title: String!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
  membersOnly: Boolean
}

input EventCreateWithoutHostInput {
  id: ID
  type: EventType!
  title: String!
  creator: UserCreateOneWithoutEventsCreatedInput!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  rsvps: RSVPCreateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
  membersOnly: Boolean
}

input EventCreateWithoutRsvpsInput {
  id: ID
  type: EventType!
  title: String!
  creator: UserCreateOneWithoutEventsCreatedInput!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserCreateOneWithoutEventsHostedInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
  membersOnly: Boolean
}

input EventCreateWithoutRunReportsInput {
  id: ID
  type: EventType!
  title: String!
  creator: UserCreateOneWithoutEventsCreatedInput!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailCreateOneWithoutPastEventsInput
  bandaids: BandaidCreateManyWithoutEventInput
  membersOnly: Boolean
}

input EventCreateWithoutTrailInput {
  id: ID
  type: EventType!
  title: String!
  creator: UserCreateOneWithoutEventsCreatedInput!
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserCreateOneWithoutEventsHostedInput
  rsvps: RSVPCreateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  bandaids: BandaidCreateManyWithoutEventInput
  runReports: RunReportCreateManyWithoutEventInput
  membersOnly: Boolean
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  address_ASC
  address_DESC
  trailDifficulty_ASC
  trailDifficulty_DESC
  trailNotes_ASC
  trailNotes_DESC
  rallyAddress_ASC
  rallyAddress_DESC
  rallyTime_ASC
  rallyTime_DESC
  membersOnly_ASC
  membersOnly_DESC
}

type EventPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: EventType!
  title: String!
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  trailDifficulty: TrailDifficulty
  trailDifficulty_not: TrailDifficulty
  trailDifficulty_in: [TrailDifficulty!]
  trailDifficulty_not_in: [TrailDifficulty!]
  trailNotes: String
  trailNotes_not: String
  trailNotes_in: [String!]
  trailNotes_not_in: [String!]
  trailNotes_lt: String
  trailNotes_lte: String
  trailNotes_gt: String
  trailNotes_gte: String
  trailNotes_contains: String
  trailNotes_not_contains: String
  trailNotes_starts_with: String
  trailNotes_not_starts_with: String
  trailNotes_ends_with: String
  trailNotes_not_ends_with: String
  rallyAddress: String
  rallyAddress_not: String
  rallyAddress_in: [String!]
  rallyAddress_not_in: [String!]
  rallyAddress_lt: String
  rallyAddress_lte: String
  rallyAddress_gt: String
  rallyAddress_gte: String
  rallyAddress_contains: String
  rallyAddress_not_contains: String
  rallyAddress_starts_with: String
  rallyAddress_not_starts_with: String
  rallyAddress_ends_with: String
  rallyAddress_not_ends_with: String
  rallyTime: DateTime
  rallyTime_not: DateTime
  rallyTime_in: [DateTime!]
  rallyTime_not_in: [DateTime!]
  rallyTime_lt: DateTime
  rallyTime_lte: DateTime
  rallyTime_gt: DateTime
  rallyTime_gte: DateTime
  membersOnly: Boolean
  membersOnly_not: Boolean
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

enum EventType {
  RUN
  COLLECTION
  FUNDRAISING
  MEETING
  CLINIC
  SOCIAL
}

input EventUpdateInput {
  type: EventType
  title: String
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateManyDataInput {
  type: EventType
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
}

input EventUpdateManyMutationInput {
  type: EventType
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  membersOnly: Boolean
}

input EventUpdateManyWithoutCreatorInput {
  create: [EventCreateWithoutCreatorInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithoutHostInput {
  create: [EventCreateWithoutHostInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutHostInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutHostInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithoutTrailInput {
  create: [EventCreateWithoutTrailInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutTrailInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutTrailInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateOneRequiredWithoutRsvpsInput {
  create: EventCreateWithoutRsvpsInput
  update: EventUpdateWithoutRsvpsDataInput
  upsert: EventUpsertWithoutRsvpsInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneWithoutBandaidsInput {
  create: EventCreateWithoutBandaidsInput
  update: EventUpdateWithoutBandaidsDataInput
  upsert: EventUpsertWithoutBandaidsInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateOneWithoutRunReportsInput {
  create: EventCreateWithoutRunReportsInput
  update: EventUpdateWithoutRunReportsDataInput
  upsert: EventUpsertWithoutRunReportsInput
  delete: Boolean
  disconnect: Boolean
  connect: EventWhereUniqueInput
}

input EventUpdateWithoutBandaidsDataInput {
  type: EventType
  title: String
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailUpdateOneWithoutPastEventsInput
  runReports: RunReportUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateWithoutCreatorDataInput {
  type: EventType
  title: String
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateWithoutHostDataInput {
  type: EventType
  title: String
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  rsvps: RSVPUpdateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateWithoutRsvpsDataInput {
  type: EventType
  title: String
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserUpdateOneWithoutEventsHostedInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateWithoutRunReportsDataInput {
  type: EventType
  title: String
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  trail: TrailUpdateOneWithoutPastEventsInput
  bandaids: BandaidUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateWithoutTrailDataInput {
  type: EventType
  title: String
  creator: UserUpdateOneRequiredWithoutEventsCreatedInput
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  startTime: DateTime
  endTime: DateTime
  host: UserUpdateOneWithoutEventsHostedInput
  rsvps: RSVPUpdateManyWithoutEventInput
  address: String
  trailDifficulty: TrailDifficulty
  trailNotes: String
  rallyAddress: String
  rallyTime: DateTime
  bandaids: BandaidUpdateManyWithoutEventInput
  runReports: RunReportUpdateManyWithoutEventInput
  membersOnly: Boolean
}

input EventUpdateWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCreatorDataInput!
}

input EventUpdateWithWhereUniqueWithoutHostInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutHostDataInput!
}

input EventUpdateWithWhereUniqueWithoutTrailInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutTrailDataInput!
}

input EventUpsertWithoutBandaidsInput {
  update: EventUpdateWithoutBandaidsDataInput!
  create: EventCreateWithoutBandaidsInput!
}

input EventUpsertWithoutRsvpsInput {
  update: EventUpdateWithoutRsvpsDataInput!
  create: EventCreateWithoutRsvpsInput!
}

input EventUpsertWithoutRunReportsInput {
  update: EventUpdateWithoutRunReportsDataInput!
  create: EventCreateWithoutRunReportsInput!
}

input EventUpsertWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCreatorDataInput!
  create: EventCreateWithoutCreatorInput!
}

input EventUpsertWithWhereUniqueWithoutHostInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutHostDataInput!
  create: EventCreateWithoutHostInput!
}

input EventUpsertWithWhereUniqueWithoutTrailInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutTrailDataInput!
  create: EventCreateWithoutTrailInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  creator: UserWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  featuredImage: CloudinaryImageWhereInput
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  host: UserWhereInput
  rsvps_every: RSVPWhereInput
  rsvps_some: RSVPWhereInput
  rsvps_none: RSVPWhereInput
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  trailDifficulty: TrailDifficulty
  trailDifficulty_not: TrailDifficulty
  trailDifficulty_in: [TrailDifficulty!]
  trailDifficulty_not_in: [TrailDifficulty!]
  trailNotes: String
  trailNotes_not: String
  trailNotes_in: [String!]
  trailNotes_not_in: [String!]
  trailNotes_lt: String
  trailNotes_lte: String
  trailNotes_gt: String
  trailNotes_gte: String
  trailNotes_contains: String
  trailNotes_not_contains: String
  trailNotes_starts_with: String
  trailNotes_not_starts_with: String
  trailNotes_ends_with: String
  trailNotes_not_ends_with: String
  rallyAddress: String
  rallyAddress_not: String
  rallyAddress_in: [String!]
  rallyAddress_not_in: [String!]
  rallyAddress_lt: String
  rallyAddress_lte: String
  rallyAddress_gt: String
  rallyAddress_gte: String
  rallyAddress_contains: String
  rallyAddress_not_contains: String
  rallyAddress_starts_with: String
  rallyAddress_not_starts_with: String
  rallyAddress_ends_with: String
  rallyAddress_not_ends_with: String
  rallyTime: DateTime
  rallyTime_not: DateTime
  rallyTime_in: [DateTime!]
  rallyTime_not_in: [DateTime!]
  rallyTime_lt: DateTime
  rallyTime_lte: DateTime
  rallyTime_gt: DateTime
  rallyTime_gte: DateTime
  trail: TrailWhereInput
  bandaids_every: BandaidWhereInput
  bandaids_some: BandaidWhereInput
  bandaids_none: BandaidWhereInput
  runReports_every: RunReportWhereInput
  runReports_some: RunReportWhereInput
  runReports_none: RunReportWhereInput
  membersOnly: Boolean
  membersOnly_not: Boolean
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNDISCLOSED
}

scalar Long

type MembershipLogItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  time: DateTime!
  message: String!
  messageCode: MembershipMessageCode!
  user: User!
  logger: User
}

type MembershipLogItemConnection {
  pageInfo: PageInfo!
  edges: [MembershipLogItemEdge]!
  aggregate: AggregateMembershipLogItem!
}

input MembershipLogItemCreateInput {
  id: ID
  time: DateTime!
  message: String!
  messageCode: MembershipMessageCode!
  user: UserCreateOneWithoutMembershipLogInput!
  logger: UserCreateOneWithoutMembershipLogContributionsInput
}

input MembershipLogItemCreateManyWithoutLoggerInput {
  create: [MembershipLogItemCreateWithoutLoggerInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
}

input MembershipLogItemCreateManyWithoutUserInput {
  create: [MembershipLogItemCreateWithoutUserInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
}

input MembershipLogItemCreateWithoutLoggerInput {
  id: ID
  time: DateTime!
  message: String!
  messageCode: MembershipMessageCode!
  user: UserCreateOneWithoutMembershipLogInput!
}

input MembershipLogItemCreateWithoutUserInput {
  id: ID
  time: DateTime!
  message: String!
  messageCode: MembershipMessageCode!
  logger: UserCreateOneWithoutMembershipLogContributionsInput
}

type MembershipLogItemEdge {
  node: MembershipLogItem!
  cursor: String!
}

enum MembershipLogItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  time_ASC
  time_DESC
  message_ASC
  message_DESC
  messageCode_ASC
  messageCode_DESC
}

type MembershipLogItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  time: DateTime!
  message: String!
  messageCode: MembershipMessageCode!
}

input MembershipLogItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  messageCode: MembershipMessageCode
  messageCode_not: MembershipMessageCode
  messageCode_in: [MembershipMessageCode!]
  messageCode_not_in: [MembershipMessageCode!]
  AND: [MembershipLogItemScalarWhereInput!]
  OR: [MembershipLogItemScalarWhereInput!]
  NOT: [MembershipLogItemScalarWhereInput!]
}

type MembershipLogItemSubscriptionPayload {
  mutation: MutationType!
  node: MembershipLogItem
  updatedFields: [String!]
  previousValues: MembershipLogItemPreviousValues
}

input MembershipLogItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MembershipLogItemWhereInput
  AND: [MembershipLogItemSubscriptionWhereInput!]
  OR: [MembershipLogItemSubscriptionWhereInput!]
  NOT: [MembershipLogItemSubscriptionWhereInput!]
}

input MembershipLogItemUpdateInput {
  time: DateTime
  message: String
  messageCode: MembershipMessageCode
  user: UserUpdateOneRequiredWithoutMembershipLogInput
  logger: UserUpdateOneWithoutMembershipLogContributionsInput
}

input MembershipLogItemUpdateManyDataInput {
  time: DateTime
  message: String
  messageCode: MembershipMessageCode
}

input MembershipLogItemUpdateManyMutationInput {
  time: DateTime
  message: String
  messageCode: MembershipMessageCode
}

input MembershipLogItemUpdateManyWithoutLoggerInput {
  create: [MembershipLogItemCreateWithoutLoggerInput!]
  delete: [MembershipLogItemWhereUniqueInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
  set: [MembershipLogItemWhereUniqueInput!]
  disconnect: [MembershipLogItemWhereUniqueInput!]
  update: [MembershipLogItemUpdateWithWhereUniqueWithoutLoggerInput!]
  upsert: [MembershipLogItemUpsertWithWhereUniqueWithoutLoggerInput!]
  deleteMany: [MembershipLogItemScalarWhereInput!]
  updateMany: [MembershipLogItemUpdateManyWithWhereNestedInput!]
}

input MembershipLogItemUpdateManyWithoutUserInput {
  create: [MembershipLogItemCreateWithoutUserInput!]
  delete: [MembershipLogItemWhereUniqueInput!]
  connect: [MembershipLogItemWhereUniqueInput!]
  set: [MembershipLogItemWhereUniqueInput!]
  disconnect: [MembershipLogItemWhereUniqueInput!]
  update: [MembershipLogItemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MembershipLogItemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MembershipLogItemScalarWhereInput!]
  updateMany: [MembershipLogItemUpdateManyWithWhereNestedInput!]
}

input MembershipLogItemUpdateManyWithWhereNestedInput {
  where: MembershipLogItemScalarWhereInput!
  data: MembershipLogItemUpdateManyDataInput!
}

input MembershipLogItemUpdateWithoutLoggerDataInput {
  time: DateTime
  message: String
  messageCode: MembershipMessageCode
  user: UserUpdateOneRequiredWithoutMembershipLogInput
}

input MembershipLogItemUpdateWithoutUserDataInput {
  time: DateTime
  message: String
  messageCode: MembershipMessageCode
  logger: UserUpdateOneWithoutMembershipLogContributionsInput
}

input MembershipLogItemUpdateWithWhereUniqueWithoutLoggerInput {
  where: MembershipLogItemWhereUniqueInput!
  data: MembershipLogItemUpdateWithoutLoggerDataInput!
}

input MembershipLogItemUpdateWithWhereUniqueWithoutUserInput {
  where: MembershipLogItemWhereUniqueInput!
  data: MembershipLogItemUpdateWithoutUserDataInput!
}

input MembershipLogItemUpsertWithWhereUniqueWithoutLoggerInput {
  where: MembershipLogItemWhereUniqueInput!
  update: MembershipLogItemUpdateWithoutLoggerDataInput!
  create: MembershipLogItemCreateWithoutLoggerInput!
}

input MembershipLogItemUpsertWithWhereUniqueWithoutUserInput {
  where: MembershipLogItemWhereUniqueInput!
  update: MembershipLogItemUpdateWithoutUserDataInput!
  create: MembershipLogItemCreateWithoutUserInput!
}

input MembershipLogItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  messageCode: MembershipMessageCode
  messageCode_not: MembershipMessageCode
  messageCode_in: [MembershipMessageCode!]
  messageCode_not_in: [MembershipMessageCode!]
  user: UserWhereInput
  logger: UserWhereInput
  AND: [MembershipLogItemWhereInput!]
  OR: [MembershipLogItemWhereInput!]
  NOT: [MembershipLogItemWhereInput!]
}

input MembershipLogItemWhereUniqueInput {
  id: ID
}

enum MembershipMessageCode {
  ACCOUNT_CREATED
  ACCOUNT_UNLOCKED
  ACCOUNT_CHANGED
  ACCOUNT_REJECTED
  DUES_PAID
  OFFICE_ADDED
  OFFICE_REMOVED
  TITLE_ADDED
  TITLE_REMOVED
  MEMBERSHIP_ELIGIBLE
  MEMBERSHIP_GRANTED
  GUEST_RESTRICTED
}

type Mutation {
  createActivityLogItem(data: ActivityLogItemCreateInput!): ActivityLogItem!
  updateActivityLogItem(data: ActivityLogItemUpdateInput!, where: ActivityLogItemWhereUniqueInput!): ActivityLogItem
  updateManyActivityLogItems(data: ActivityLogItemUpdateManyMutationInput!, where: ActivityLogItemWhereInput): BatchPayload!
  upsertActivityLogItem(where: ActivityLogItemWhereUniqueInput!, create: ActivityLogItemCreateInput!, update: ActivityLogItemUpdateInput!): ActivityLogItem!
  deleteActivityLogItem(where: ActivityLogItemWhereUniqueInput!): ActivityLogItem
  deleteManyActivityLogItems(where: ActivityLogItemWhereInput): BatchPayload!
  createBallot(data: BallotCreateInput!): Ballot!
  updateBallot(data: BallotUpdateInput!, where: BallotWhereUniqueInput!): Ballot
  updateManyBallots(data: BallotUpdateManyMutationInput!, where: BallotWhereInput): BatchPayload!
  upsertBallot(where: BallotWhereUniqueInput!, create: BallotCreateInput!, update: BallotUpdateInput!): Ballot!
  deleteBallot(where: BallotWhereUniqueInput!): Ballot
  deleteManyBallots(where: BallotWhereInput): BatchPayload!
  createBandaid(data: BandaidCreateInput!): Bandaid!
  updateBandaid(data: BandaidUpdateInput!, where: BandaidWhereUniqueInput!): Bandaid
  updateManyBandaids(data: BandaidUpdateManyMutationInput!, where: BandaidWhereInput): BatchPayload!
  upsertBandaid(where: BandaidWhereUniqueInput!, create: BandaidCreateInput!, update: BandaidUpdateInput!): Bandaid!
  deleteBandaid(where: BandaidWhereUniqueInput!): Bandaid
  deleteManyBandaids(where: BandaidWhereInput): BatchPayload!
  createCloudinaryImage(data: CloudinaryImageCreateInput!): CloudinaryImage!
  updateCloudinaryImage(data: CloudinaryImageUpdateInput!, where: CloudinaryImageWhereUniqueInput!): CloudinaryImage
  updateManyCloudinaryImages(data: CloudinaryImageUpdateManyMutationInput!, where: CloudinaryImageWhereInput): BatchPayload!
  upsertCloudinaryImage(where: CloudinaryImageWhereUniqueInput!, create: CloudinaryImageCreateInput!, update: CloudinaryImageUpdateInput!): CloudinaryImage!
  deleteCloudinaryImage(where: CloudinaryImageWhereUniqueInput!): CloudinaryImage
  deleteManyCloudinaryImages(where: CloudinaryImageWhereInput): BatchPayload!
  createCondition(data: ConditionCreateInput!): Condition!
  updateCondition(data: ConditionUpdateInput!, where: ConditionWhereUniqueInput!): Condition
  updateManyConditions(data: ConditionUpdateManyMutationInput!, where: ConditionWhereInput): BatchPayload!
  upsertCondition(where: ConditionWhereUniqueInput!, create: ConditionCreateInput!, update: ConditionUpdateInput!): Condition!
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteManyConditions(where: ConditionWhereInput): BatchPayload!
  createContactInfo(data: ContactInfoCreateInput!): ContactInfo!
  updateContactInfo(data: ContactInfoUpdateInput!, where: ContactInfoWhereUniqueInput!): ContactInfo
  updateManyContactInfoes(data: ContactInfoUpdateManyMutationInput!, where: ContactInfoWhereInput): BatchPayload!
  upsertContactInfo(where: ContactInfoWhereUniqueInput!, create: ContactInfoCreateInput!, update: ContactInfoUpdateInput!): ContactInfo!
  deleteContactInfo(where: ContactInfoWhereUniqueInput!): ContactInfo
  deleteManyContactInfoes(where: ContactInfoWhereInput): BatchPayload!
  createElection(data: ElectionCreateInput!): Election!
  updateElection(data: ElectionUpdateInput!, where: ElectionWhereUniqueInput!): Election
  updateManyElections(data: ElectionUpdateManyMutationInput!, where: ElectionWhereInput): BatchPayload!
  upsertElection(where: ElectionWhereUniqueInput!, create: ElectionCreateInput!, update: ElectionUpdateInput!): Election!
  deleteElection(where: ElectionWhereUniqueInput!): Election
  deleteManyElections(where: ElectionWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createMembershipLogItem(data: MembershipLogItemCreateInput!): MembershipLogItem!
  updateMembershipLogItem(data: MembershipLogItemUpdateInput!, where: MembershipLogItemWhereUniqueInput!): MembershipLogItem
  updateManyMembershipLogItems(data: MembershipLogItemUpdateManyMutationInput!, where: MembershipLogItemWhereInput): BatchPayload!
  upsertMembershipLogItem(where: MembershipLogItemWhereUniqueInput!, create: MembershipLogItemCreateInput!, update: MembershipLogItemUpdateInput!): MembershipLogItem!
  deleteMembershipLogItem(where: MembershipLogItemWhereUniqueInput!): MembershipLogItem
  deleteManyMembershipLogItems(where: MembershipLogItemWhereInput): BatchPayload!
  createPreference(data: PreferenceCreateInput!): Preference!
  updatePreference(data: PreferenceUpdateInput!, where: PreferenceWhereUniqueInput!): Preference
  updateManyPreferences(data: PreferenceUpdateManyMutationInput!, where: PreferenceWhereInput): BatchPayload!
  upsertPreference(where: PreferenceWhereUniqueInput!, create: PreferenceCreateInput!, update: PreferenceUpdateInput!): Preference!
  deletePreference(where: PreferenceWhereUniqueInput!): Preference
  deleteManyPreferences(where: PreferenceWhereInput): BatchPayload!
  createRSVP(data: RSVPCreateInput!): RSVP!
  updateRSVP(data: RSVPUpdateInput!, where: RSVPWhereUniqueInput!): RSVP
  updateManyRSVPs(data: RSVPUpdateManyMutationInput!, where: RSVPWhereInput): BatchPayload!
  upsertRSVP(where: RSVPWhereUniqueInput!, create: RSVPCreateInput!, update: RSVPUpdateInput!): RSVP!
  deleteRSVP(where: RSVPWhereUniqueInput!): RSVP
  deleteManyRSVPs(where: RSVPWhereInput): BatchPayload!
  createRegistration(data: RegistrationCreateInput!): Registration!
  updateRegistration(data: RegistrationUpdateInput!, where: RegistrationWhereUniqueInput!): Registration
  updateManyRegistrations(data: RegistrationUpdateManyMutationInput!, where: RegistrationWhereInput): BatchPayload!
  upsertRegistration(where: RegistrationWhereUniqueInput!, create: RegistrationCreateInput!, update: RegistrationUpdateInput!): Registration!
  deleteRegistration(where: RegistrationWhereUniqueInput!): Registration
  deleteManyRegistrations(where: RegistrationWhereInput): BatchPayload!
  createRigImage(data: RigImageCreateInput!): RigImage!
  updateRigImage(data: RigImageUpdateInput!, where: RigImageWhereUniqueInput!): RigImage
  upsertRigImage(where: RigImageWhereUniqueInput!, create: RigImageCreateInput!, update: RigImageUpdateInput!): RigImage!
  deleteRigImage(where: RigImageWhereUniqueInput!): RigImage
  deleteManyRigImages(where: RigImageWhereInput): BatchPayload!
  createRunReport(data: RunReportCreateInput!): RunReport!
  updateRunReport(data: RunReportUpdateInput!, where: RunReportWhereUniqueInput!): RunReport
  updateManyRunReports(data: RunReportUpdateManyMutationInput!, where: RunReportWhereInput): BatchPayload!
  upsertRunReport(where: RunReportWhereUniqueInput!, create: RunReportCreateInput!, update: RunReportUpdateInput!): RunReport!
  deleteRunReport(where: RunReportWhereUniqueInput!): RunReport
  deleteManyRunReports(where: RunReportWhereInput): BatchPayload!
  createTrail(data: TrailCreateInput!): Trail!
  updateTrail(data: TrailUpdateInput!, where: TrailWhereUniqueInput!): Trail
  updateManyTrails(data: TrailUpdateManyMutationInput!, where: TrailWhereInput): BatchPayload!
  upsertTrail(where: TrailWhereUniqueInput!, create: TrailCreateInput!, update: TrailUpdateInput!): Trail!
  deleteTrail(where: TrailWhereUniqueInput!): Trail
  deleteManyTrails(where: TrailWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserMeta(data: UserMetaCreateInput!): UserMeta!
  updateUserMeta(data: UserMetaUpdateInput!, where: UserMetaWhereUniqueInput!): UserMeta
  updateManyUserMetas(data: UserMetaUpdateManyMutationInput!, where: UserMetaWhereInput): BatchPayload!
  upsertUserMeta(where: UserMetaWhereUniqueInput!, create: UserMetaCreateInput!, update: UserMetaUpdateInput!): UserMeta!
  deleteUserMeta(where: UserMetaWhereUniqueInput!): UserMeta
  deleteManyUserMetas(where: UserMetaWhereInput): BatchPayload!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle
  updateManyVehicles(data: VehicleUpdateManyMutationInput!, where: VehicleWhereInput): BatchPayload!
  upsertVehicle(where: VehicleWhereUniqueInput!, create: VehicleCreateInput!, update: VehicleUpdateInput!): Vehicle!
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteManyVehicles(where: VehicleWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

enum Office {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  TREASURER
}

enum OutfitLevel {
  MODIFIED
  STOCK
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Preference {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  user: User
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

type PreferenceConnection {
  pageInfo: PageInfo!
  edges: [PreferenceEdge]!
  aggregate: AggregatePreference!
}

input PreferenceCreateInput {
  id: ID
  user: UserCreateOneWithoutPreferencesInput
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

input PreferenceCreateOneWithoutUserInput {
  create: PreferenceCreateWithoutUserInput
  connect: PreferenceWhereUniqueInput
}

input PreferenceCreateWithoutUserInput {
  id: ID
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

type PreferenceEdge {
  node: Preference!
  cursor: String!
}

enum PreferenceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  emergencyContactName_ASC
  emergencyContactName_DESC
  emergencyContactPhone_ASC
  emergencyContactPhone_DESC
  photoPermissions_ASC
  photoPermissions_DESC
  showPhoneNumber_ASC
  showPhoneNumber_DESC
}

type PreferencePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

type PreferenceSubscriptionPayload {
  mutation: MutationType!
  node: Preference
  updatedFields: [String!]
  previousValues: PreferencePreviousValues
}

input PreferenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PreferenceWhereInput
  AND: [PreferenceSubscriptionWhereInput!]
  OR: [PreferenceSubscriptionWhereInput!]
  NOT: [PreferenceSubscriptionWhereInput!]
}

input PreferenceUpdateInput {
  user: UserUpdateOneWithoutPreferencesInput
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

input PreferenceUpdateManyMutationInput {
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

input PreferenceUpdateOneWithoutUserInput {
  create: PreferenceCreateWithoutUserInput
  update: PreferenceUpdateWithoutUserDataInput
  upsert: PreferenceUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: PreferenceWhereUniqueInput
}

input PreferenceUpdateWithoutUserDataInput {
  emergencyContactName: String
  emergencyContactPhone: String
  photoPermissions: Boolean
  showPhoneNumber: Boolean
}

input PreferenceUpsertWithoutUserInput {
  update: PreferenceUpdateWithoutUserDataInput!
  create: PreferenceCreateWithoutUserInput!
}

input PreferenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  emergencyContactName: String
  emergencyContactName_not: String
  emergencyContactName_in: [String!]
  emergencyContactName_not_in: [String!]
  emergencyContactName_lt: String
  emergencyContactName_lte: String
  emergencyContactName_gt: String
  emergencyContactName_gte: String
  emergencyContactName_contains: String
  emergencyContactName_not_contains: String
  emergencyContactName_starts_with: String
  emergencyContactName_not_starts_with: String
  emergencyContactName_ends_with: String
  emergencyContactName_not_ends_with: String
  emergencyContactPhone: String
  emergencyContactPhone_not: String
  emergencyContactPhone_in: [String!]
  emergencyContactPhone_not_in: [String!]
  emergencyContactPhone_lt: String
  emergencyContactPhone_lte: String
  emergencyContactPhone_gt: String
  emergencyContactPhone_gte: String
  emergencyContactPhone_contains: String
  emergencyContactPhone_not_contains: String
  emergencyContactPhone_starts_with: String
  emergencyContactPhone_not_starts_with: String
  emergencyContactPhone_ends_with: String
  emergencyContactPhone_not_ends_with: String
  photoPermissions: Boolean
  photoPermissions_not: Boolean
  showPhoneNumber: Boolean
  showPhoneNumber_not: Boolean
  AND: [PreferenceWhereInput!]
  OR: [PreferenceWhereInput!]
  NOT: [PreferenceWhereInput!]
}

input PreferenceWhereUniqueInput {
  id: ID
}

type Query {
  activityLogItem(where: ActivityLogItemWhereUniqueInput!): ActivityLogItem
  activityLogItems(where: ActivityLogItemWhereInput, orderBy: ActivityLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActivityLogItem]!
  activityLogItemsConnection(where: ActivityLogItemWhereInput, orderBy: ActivityLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityLogItemConnection!
  ballot(where: BallotWhereUniqueInput!): Ballot
  ballots(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ballot]!
  ballotsConnection(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BallotConnection!
  bandaid(where: BandaidWhereUniqueInput!): Bandaid
  bandaids(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bandaid]!
  bandaidsConnection(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BandaidConnection!
  cloudinaryImage(where: CloudinaryImageWhereUniqueInput!): CloudinaryImage
  cloudinaryImages(where: CloudinaryImageWhereInput, orderBy: CloudinaryImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CloudinaryImage]!
  cloudinaryImagesConnection(where: CloudinaryImageWhereInput, orderBy: CloudinaryImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CloudinaryImageConnection!
  condition(where: ConditionWhereUniqueInput!): Condition
  conditions(where: ConditionWhereInput, orderBy: ConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Condition]!
  conditionsConnection(where: ConditionWhereInput, orderBy: ConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConditionConnection!
  contactInfo(where: ContactInfoWhereUniqueInput!): ContactInfo
  contactInfoes(where: ContactInfoWhereInput, orderBy: ContactInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactInfo]!
  contactInfoesConnection(where: ContactInfoWhereInput, orderBy: ContactInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactInfoConnection!
  election(where: ElectionWhereUniqueInput!): Election
  elections(where: ElectionWhereInput, orderBy: ElectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Election]!
  electionsConnection(where: ElectionWhereInput, orderBy: ElectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ElectionConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  membershipLogItem(where: MembershipLogItemWhereUniqueInput!): MembershipLogItem
  membershipLogItems(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MembershipLogItem]!
  membershipLogItemsConnection(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MembershipLogItemConnection!
  preference(where: PreferenceWhereUniqueInput!): Preference
  preferences(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Preference]!
  preferencesConnection(where: PreferenceWhereInput, orderBy: PreferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreferenceConnection!
  rSVP(where: RSVPWhereUniqueInput!): RSVP
  rSVPs(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RSVP]!
  rSVPsConnection(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RSVPConnection!
  registration(where: RegistrationWhereUniqueInput!): Registration
  registrations(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registration]!
  registrationsConnection(where: RegistrationWhereInput, orderBy: RegistrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegistrationConnection!
  rigImage(where: RigImageWhereUniqueInput!): RigImage
  rigImages(where: RigImageWhereInput, orderBy: RigImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RigImage]!
  rigImagesConnection(where: RigImageWhereInput, orderBy: RigImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RigImageConnection!
  runReport(where: RunReportWhereUniqueInput!): RunReport
  runReports(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport]!
  runReportsConnection(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RunReportConnection!
  trail(where: TrailWhereUniqueInput!): Trail
  trails(where: TrailWhereInput, orderBy: TrailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trail]!
  trailsConnection(where: TrailWhereInput, orderBy: TrailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrailConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userMeta(where: UserMetaWhereUniqueInput!): UserMeta
  userMetas(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserMeta]!
  userMetasConnection(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserMetaConnection!
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle]!
  vehiclesConnection(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Registration {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String
  lastName: String
  email: String!
  source: String!
  token: String!
  tokenExpiry: Float!
}

type RegistrationConnection {
  pageInfo: PageInfo!
  edges: [RegistrationEdge]!
  aggregate: AggregateRegistration!
}

input RegistrationCreateInput {
  id: ID
  firstName: String
  lastName: String
  email: String!
  source: String!
  token: String!
  tokenExpiry: Float!
}

type RegistrationEdge {
  node: Registration!
  cursor: String!
}

enum RegistrationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  source_ASC
  source_DESC
  token_ASC
  token_DESC
  tokenExpiry_ASC
  tokenExpiry_DESC
}

type RegistrationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String
  lastName: String
  email: String!
  source: String!
  token: String!
  tokenExpiry: Float!
}

type RegistrationSubscriptionPayload {
  mutation: MutationType!
  node: Registration
  updatedFields: [String!]
  previousValues: RegistrationPreviousValues
}

input RegistrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegistrationWhereInput
  AND: [RegistrationSubscriptionWhereInput!]
  OR: [RegistrationSubscriptionWhereInput!]
  NOT: [RegistrationSubscriptionWhereInput!]
}

input RegistrationUpdateInput {
  firstName: String
  lastName: String
  email: String
  source: String
  token: String
  tokenExpiry: Float
}

input RegistrationUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  source: String
  token: String
  tokenExpiry: Float
}

input RegistrationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  tokenExpiry: Float
  tokenExpiry_not: Float
  tokenExpiry_in: [Float!]
  tokenExpiry_not_in: [Float!]
  tokenExpiry_lt: Float
  tokenExpiry_lte: Float
  tokenExpiry_gt: Float
  tokenExpiry_gte: Float
  AND: [RegistrationWhereInput!]
  OR: [RegistrationWhereInput!]
  NOT: [RegistrationWhereInput!]
}

input RegistrationWhereUniqueInput {
  id: ID
  token: String
}

type RigImage {
  id: ID!
  image: CloudinaryImage
}

type RigImageConnection {
  pageInfo: PageInfo!
  edges: [RigImageEdge]!
  aggregate: AggregateRigImage!
}

input RigImageCreateInput {
  id: ID
  image: CloudinaryImageCreateOneInput
}

input RigImageCreateOneInput {
  create: RigImageCreateInput
  connect: RigImageWhereUniqueInput
}

type RigImageEdge {
  node: RigImage!
  cursor: String!
}

enum RigImageOrderByInput {
  id_ASC
  id_DESC
}

type RigImagePreviousValues {
  id: ID!
}

type RigImageSubscriptionPayload {
  mutation: MutationType!
  node: RigImage
  updatedFields: [String!]
  previousValues: RigImagePreviousValues
}

input RigImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RigImageWhereInput
  AND: [RigImageSubscriptionWhereInput!]
  OR: [RigImageSubscriptionWhereInput!]
  NOT: [RigImageSubscriptionWhereInput!]
}

input RigImageUpdateDataInput {
  image: CloudinaryImageUpdateOneInput
}

input RigImageUpdateInput {
  image: CloudinaryImageUpdateOneInput
}

input RigImageUpdateOneInput {
  create: RigImageCreateInput
  update: RigImageUpdateDataInput
  upsert: RigImageUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RigImageWhereUniqueInput
}

input RigImageUpsertNestedInput {
  update: RigImageUpdateDataInput!
  create: RigImageCreateInput!
}

input RigImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: CloudinaryImageWhereInput
  AND: [RigImageWhereInput!]
  OR: [RigImageWhereInput!]
  NOT: [RigImageWhereInput!]
}

input RigImageWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  OFFICER
  RUN_MASTER
  RUN_LEADER
  USER
}

type RSVP {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  member: User!
  event: Event!
  status: RSVPStatus!
}

type RSVPConnection {
  pageInfo: PageInfo!
  edges: [RSVPEdge]!
  aggregate: AggregateRSVP!
}

input RSVPCreateInput {
  id: ID
  member: UserCreateOneWithoutEventsRSVPdInput!
  event: EventCreateOneWithoutRsvpsInput!
  status: RSVPStatus
}

input RSVPCreateManyWithoutEventInput {
  create: [RSVPCreateWithoutEventInput!]
  connect: [RSVPWhereUniqueInput!]
}

input RSVPCreateManyWithoutMemberInput {
  create: [RSVPCreateWithoutMemberInput!]
  connect: [RSVPWhereUniqueInput!]
}

input RSVPCreateWithoutEventInput {
  id: ID
  member: UserCreateOneWithoutEventsRSVPdInput!
  status: RSVPStatus
}

input RSVPCreateWithoutMemberInput {
  id: ID
  event: EventCreateOneWithoutRsvpsInput!
  status: RSVPStatus
}

type RSVPEdge {
  node: RSVP!
  cursor: String!
}

enum RSVPOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type RSVPPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: RSVPStatus!
}

input RSVPScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: RSVPStatus
  status_not: RSVPStatus
  status_in: [RSVPStatus!]
  status_not_in: [RSVPStatus!]
  AND: [RSVPScalarWhereInput!]
  OR: [RSVPScalarWhereInput!]
  NOT: [RSVPScalarWhereInput!]
}

enum RSVPStatus {
  NONE
  CANT_GO
  GOING
  MAYBE
}

type RSVPSubscriptionPayload {
  mutation: MutationType!
  node: RSVP
  updatedFields: [String!]
  previousValues: RSVPPreviousValues
}

input RSVPSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RSVPWhereInput
  AND: [RSVPSubscriptionWhereInput!]
  OR: [RSVPSubscriptionWhereInput!]
  NOT: [RSVPSubscriptionWhereInput!]
}

input RSVPUpdateInput {
  member: UserUpdateOneRequiredWithoutEventsRSVPdInput
  event: EventUpdateOneRequiredWithoutRsvpsInput
  status: RSVPStatus
}

input RSVPUpdateManyDataInput {
  status: RSVPStatus
}

input RSVPUpdateManyMutationInput {
  status: RSVPStatus
}

input RSVPUpdateManyWithoutEventInput {
  create: [RSVPCreateWithoutEventInput!]
  delete: [RSVPWhereUniqueInput!]
  connect: [RSVPWhereUniqueInput!]
  set: [RSVPWhereUniqueInput!]
  disconnect: [RSVPWhereUniqueInput!]
  update: [RSVPUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [RSVPUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [RSVPScalarWhereInput!]
  updateMany: [RSVPUpdateManyWithWhereNestedInput!]
}

input RSVPUpdateManyWithoutMemberInput {
  create: [RSVPCreateWithoutMemberInput!]
  delete: [RSVPWhereUniqueInput!]
  connect: [RSVPWhereUniqueInput!]
  set: [RSVPWhereUniqueInput!]
  disconnect: [RSVPWhereUniqueInput!]
  update: [RSVPUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [RSVPUpsertWithWhereUniqueWithoutMemberInput!]
  deleteMany: [RSVPScalarWhereInput!]
  updateMany: [RSVPUpdateManyWithWhereNestedInput!]
}

input RSVPUpdateManyWithWhereNestedInput {
  where: RSVPScalarWhereInput!
  data: RSVPUpdateManyDataInput!
}

input RSVPUpdateWithoutEventDataInput {
  member: UserUpdateOneRequiredWithoutEventsRSVPdInput
  status: RSVPStatus
}

input RSVPUpdateWithoutMemberDataInput {
  event: EventUpdateOneRequiredWithoutRsvpsInput
  status: RSVPStatus
}

input RSVPUpdateWithWhereUniqueWithoutEventInput {
  where: RSVPWhereUniqueInput!
  data: RSVPUpdateWithoutEventDataInput!
}

input RSVPUpdateWithWhereUniqueWithoutMemberInput {
  where: RSVPWhereUniqueInput!
  data: RSVPUpdateWithoutMemberDataInput!
}

input RSVPUpsertWithWhereUniqueWithoutEventInput {
  where: RSVPWhereUniqueInput!
  update: RSVPUpdateWithoutEventDataInput!
  create: RSVPCreateWithoutEventInput!
}

input RSVPUpsertWithWhereUniqueWithoutMemberInput {
  where: RSVPWhereUniqueInput!
  update: RSVPUpdateWithoutMemberDataInput!
  create: RSVPCreateWithoutMemberInput!
}

input RSVPWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  member: UserWhereInput
  event: EventWhereInput
  status: RSVPStatus
  status_not: RSVPStatus
  status_in: [RSVPStatus!]
  status_not_in: [RSVPStatus!]
  AND: [RSVPWhereInput!]
  OR: [RSVPWhereInput!]
  NOT: [RSVPWhereInput!]
}

input RSVPWhereUniqueInput {
  id: ID
}

type RunReport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  reporter: User!
  title: String!
  description: String
  trail: Trail!
  event: Event
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  condition: Condition
  favorite: Boolean
}

type RunReportConnection {
  pageInfo: PageInfo!
  edges: [RunReportEdge]!
  aggregate: AggregateRunReport!
}

input RunReportCreateInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  title: String!
  description: String
  trail: TrailCreateOneWithoutRunReportsInput!
  event: EventCreateOneWithoutRunReportsInput
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  condition: ConditionCreateOneWithoutReportInput
  favorite: Boolean
}

input RunReportCreateManyWithoutEventInput {
  create: [RunReportCreateWithoutEventInput!]
  connect: [RunReportWhereUniqueInput!]
}

input RunReportCreateManyWithoutReporterInput {
  create: [RunReportCreateWithoutReporterInput!]
  connect: [RunReportWhereUniqueInput!]
}

input RunReportCreateManyWithoutTrailInput {
  create: [RunReportCreateWithoutTrailInput!]
  connect: [RunReportWhereUniqueInput!]
}

input RunReportCreateOneWithoutConditionInput {
  create: RunReportCreateWithoutConditionInput
  connect: RunReportWhereUniqueInput
}

input RunReportCreateWithoutConditionInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  title: String!
  description: String
  trail: TrailCreateOneWithoutRunReportsInput!
  event: EventCreateOneWithoutRunReportsInput
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
}

input RunReportCreateWithoutEventInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  title: String!
  description: String
  trail: TrailCreateOneWithoutRunReportsInput!
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  condition: ConditionCreateOneWithoutReportInput
  favorite: Boolean
}

input RunReportCreateWithoutReporterInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  trail: TrailCreateOneWithoutRunReportsInput!
  event: EventCreateOneWithoutRunReportsInput
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  condition: ConditionCreateOneWithoutReportInput
  favorite: Boolean
}

input RunReportCreateWithoutTrailInput {
  id: ID
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  reporter: UserCreateOneWithoutRunReportsLoggedInput!
  title: String!
  description: String
  event: EventCreateOneWithoutRunReportsInput
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  condition: ConditionCreateOneWithoutReportInput
  favorite: Boolean
}

type RunReportEdge {
  node: RunReport!
  cursor: String!
}

enum RunReportOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  reportFiled_ASC
  reportFiled_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  weather_ASC
  weather_DESC
  difficulty_ASC
  difficulty_DESC
  rating_ASC
  rating_DESC
  favorite_ASC
  favorite_DESC
}

type RunReportPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  reportFiled: DateTime!
  title: String!
  description: String
  weather: String!
  difficulty: TrailDifficulty!
  rating: Float!
  favorite: Boolean
}

input RunReportScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  reportFiled: DateTime
  reportFiled_not: DateTime
  reportFiled_in: [DateTime!]
  reportFiled_not_in: [DateTime!]
  reportFiled_lt: DateTime
  reportFiled_lte: DateTime
  reportFiled_gt: DateTime
  reportFiled_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  weather: String
  weather_not: String
  weather_in: [String!]
  weather_not_in: [String!]
  weather_lt: String
  weather_lte: String
  weather_gt: String
  weather_gte: String
  weather_contains: String
  weather_not_contains: String
  weather_starts_with: String
  weather_not_starts_with: String
  weather_ends_with: String
  weather_not_ends_with: String
  difficulty: TrailDifficulty
  difficulty_not: TrailDifficulty
  difficulty_in: [TrailDifficulty!]
  difficulty_not_in: [TrailDifficulty!]
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  favorite: Boolean
  favorite_not: Boolean
  AND: [RunReportScalarWhereInput!]
  OR: [RunReportScalarWhereInput!]
  NOT: [RunReportScalarWhereInput!]
}

type RunReportSubscriptionPayload {
  mutation: MutationType!
  node: RunReport
  updatedFields: [String!]
  previousValues: RunReportPreviousValues
}

input RunReportSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RunReportWhereInput
  AND: [RunReportSubscriptionWhereInput!]
  OR: [RunReportSubscriptionWhereInput!]
  NOT: [RunReportSubscriptionWhereInput!]
}

input RunReportUpdateInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  title: String
  description: String
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  event: EventUpdateOneWithoutRunReportsInput
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  condition: ConditionUpdateOneWithoutReportInput
  favorite: Boolean
}

input RunReportUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
}

input RunReportUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
}

input RunReportUpdateManyWithoutEventInput {
  create: [RunReportCreateWithoutEventInput!]
  delete: [RunReportWhereUniqueInput!]
  connect: [RunReportWhereUniqueInput!]
  set: [RunReportWhereUniqueInput!]
  disconnect: [RunReportWhereUniqueInput!]
  update: [RunReportUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [RunReportUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [RunReportScalarWhereInput!]
  updateMany: [RunReportUpdateManyWithWhereNestedInput!]
}

input RunReportUpdateManyWithoutReporterInput {
  create: [RunReportCreateWithoutReporterInput!]
  delete: [RunReportWhereUniqueInput!]
  connect: [RunReportWhereUniqueInput!]
  set: [RunReportWhereUniqueInput!]
  disconnect: [RunReportWhereUniqueInput!]
  update: [RunReportUpdateWithWhereUniqueWithoutReporterInput!]
  upsert: [RunReportUpsertWithWhereUniqueWithoutReporterInput!]
  deleteMany: [RunReportScalarWhereInput!]
  updateMany: [RunReportUpdateManyWithWhereNestedInput!]
}

input RunReportUpdateManyWithoutTrailInput {
  create: [RunReportCreateWithoutTrailInput!]
  delete: [RunReportWhereUniqueInput!]
  connect: [RunReportWhereUniqueInput!]
  set: [RunReportWhereUniqueInput!]
  disconnect: [RunReportWhereUniqueInput!]
  update: [RunReportUpdateWithWhereUniqueWithoutTrailInput!]
  upsert: [RunReportUpsertWithWhereUniqueWithoutTrailInput!]
  deleteMany: [RunReportScalarWhereInput!]
  updateMany: [RunReportUpdateManyWithWhereNestedInput!]
}

input RunReportUpdateManyWithWhereNestedInput {
  where: RunReportScalarWhereInput!
  data: RunReportUpdateManyDataInput!
}

input RunReportUpdateOneRequiredWithoutConditionInput {
  create: RunReportCreateWithoutConditionInput
  update: RunReportUpdateWithoutConditionDataInput
  upsert: RunReportUpsertWithoutConditionInput
  connect: RunReportWhereUniqueInput
}

input RunReportUpdateWithoutConditionDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  title: String
  description: String
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  event: EventUpdateOneWithoutRunReportsInput
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  favorite: Boolean
}

input RunReportUpdateWithoutEventDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  title: String
  description: String
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  condition: ConditionUpdateOneWithoutReportInput
  favorite: Boolean
}

input RunReportUpdateWithoutReporterDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  title: String
  description: String
  trail: TrailUpdateOneRequiredWithoutRunReportsInput
  event: EventUpdateOneWithoutRunReportsInput
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  condition: ConditionUpdateOneWithoutReportInput
  favorite: Boolean
}

input RunReportUpdateWithoutTrailDataInput {
  startTime: DateTime
  endTime: DateTime
  reportFiled: DateTime
  reporter: UserUpdateOneRequiredWithoutRunReportsLoggedInput
  title: String
  description: String
  event: EventUpdateOneWithoutRunReportsInput
  weather: String
  difficulty: TrailDifficulty
  rating: Float
  condition: ConditionUpdateOneWithoutReportInput
  favorite: Boolean
}

input RunReportUpdateWithWhereUniqueWithoutEventInput {
  where: RunReportWhereUniqueInput!
  data: RunReportUpdateWithoutEventDataInput!
}

input RunReportUpdateWithWhereUniqueWithoutReporterInput {
  where: RunReportWhereUniqueInput!
  data: RunReportUpdateWithoutReporterDataInput!
}

input RunReportUpdateWithWhereUniqueWithoutTrailInput {
  where: RunReportWhereUniqueInput!
  data: RunReportUpdateWithoutTrailDataInput!
}

input RunReportUpsertWithoutConditionInput {
  update: RunReportUpdateWithoutConditionDataInput!
  create: RunReportCreateWithoutConditionInput!
}

input RunReportUpsertWithWhereUniqueWithoutEventInput {
  where: RunReportWhereUniqueInput!
  update: RunReportUpdateWithoutEventDataInput!
  create: RunReportCreateWithoutEventInput!
}

input RunReportUpsertWithWhereUniqueWithoutReporterInput {
  where: RunReportWhereUniqueInput!
  update: RunReportUpdateWithoutReporterDataInput!
  create: RunReportCreateWithoutReporterInput!
}

input RunReportUpsertWithWhereUniqueWithoutTrailInput {
  where: RunReportWhereUniqueInput!
  update: RunReportUpdateWithoutTrailDataInput!
  create: RunReportCreateWithoutTrailInput!
}

input RunReportWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  reportFiled: DateTime
  reportFiled_not: DateTime
  reportFiled_in: [DateTime!]
  reportFiled_not_in: [DateTime!]
  reportFiled_lt: DateTime
  reportFiled_lte: DateTime
  reportFiled_gt: DateTime
  reportFiled_gte: DateTime
  reporter: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  trail: TrailWhereInput
  event: EventWhereInput
  weather: String
  weather_not: String
  weather_in: [String!]
  weather_not_in: [String!]
  weather_lt: String
  weather_lte: String
  weather_gt: String
  weather_gte: String
  weather_contains: String
  weather_not_contains: String
  weather_starts_with: String
  weather_not_starts_with: String
  weather_ends_with: String
  weather_not_ends_with: String
  difficulty: TrailDifficulty
  difficulty_not: TrailDifficulty
  difficulty_in: [TrailDifficulty!]
  difficulty_not_in: [TrailDifficulty!]
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  condition: ConditionWhereInput
  favorite: Boolean
  favorite_not: Boolean
  AND: [RunReportWhereInput!]
  OR: [RunReportWhereInput!]
  NOT: [RunReportWhereInput!]
}

input RunReportWhereUniqueInput {
  id: ID
}

type Subscription {
  activityLogItem(where: ActivityLogItemSubscriptionWhereInput): ActivityLogItemSubscriptionPayload
  ballot(where: BallotSubscriptionWhereInput): BallotSubscriptionPayload
  bandaid(where: BandaidSubscriptionWhereInput): BandaidSubscriptionPayload
  cloudinaryImage(where: CloudinaryImageSubscriptionWhereInput): CloudinaryImageSubscriptionPayload
  condition(where: ConditionSubscriptionWhereInput): ConditionSubscriptionPayload
  contactInfo(where: ContactInfoSubscriptionWhereInput): ContactInfoSubscriptionPayload
  election(where: ElectionSubscriptionWhereInput): ElectionSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  membershipLogItem(where: MembershipLogItemSubscriptionWhereInput): MembershipLogItemSubscriptionPayload
  preference(where: PreferenceSubscriptionWhereInput): PreferenceSubscriptionPayload
  rSVP(where: RSVPSubscriptionWhereInput): RSVPSubscriptionPayload
  registration(where: RegistrationSubscriptionWhereInput): RegistrationSubscriptionPayload
  rigImage(where: RigImageSubscriptionWhereInput): RigImageSubscriptionPayload
  runReport(where: RunReportSubscriptionWhereInput): RunReportSubscriptionPayload
  trail(where: TrailSubscriptionWhereInput): TrailSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userMeta(where: UserMetaSubscriptionWhereInput): UserMetaSubscriptionPayload
  vehicle(where: VehicleSubscriptionWhereInput): VehicleSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

enum Title {
  WEBMASTER
  CHARTER_MEMBER
  HISTORIAN
}

type Trail {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  name: String
  description: String
  featuredImage: CloudinaryImage
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  visitors(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  runReports(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport!]
}

enum TrailCondition {
  CLEAR
  MINOR_ISSUES
  MAJOR_ISSUES
  CLOSED
}

type TrailConnection {
  pageInfo: PageInfo!
  edges: [TrailEdge]!
  aggregate: AggregateTrail!
}

input TrailCreateInput {
  id: ID
  slug: String!
  name: String
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventCreateManyWithoutTrailInput
  visitors: UserCreateManyWithoutTrailsVisitedInput
  runReports: RunReportCreateManyWithoutTrailInput
}

input TrailCreateManyWithoutVisitorsInput {
  create: [TrailCreateWithoutVisitorsInput!]
  connect: [TrailWhereUniqueInput!]
}

input TrailCreateOneWithoutPastEventsInput {
  create: TrailCreateWithoutPastEventsInput
  connect: TrailWhereUniqueInput
}

input TrailCreateOneWithoutRunReportsInput {
  create: TrailCreateWithoutRunReportsInput
  connect: TrailWhereUniqueInput
}

input TrailCreateWithoutPastEventsInput {
  id: ID
  slug: String!
  name: String
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  visitors: UserCreateManyWithoutTrailsVisitedInput
  runReports: RunReportCreateManyWithoutTrailInput
}

input TrailCreateWithoutRunReportsInput {
  id: ID
  slug: String!
  name: String
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventCreateManyWithoutTrailInput
  visitors: UserCreateManyWithoutTrailsVisitedInput
}

input TrailCreateWithoutVisitorsInput {
  id: ID
  slug: String!
  name: String
  description: String
  featuredImage: CloudinaryImageCreateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventCreateManyWithoutTrailInput
  runReports: RunReportCreateManyWithoutTrailInput
}

enum TrailDifficulty {
  UNKNOWN
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type TrailEdge {
  node: Trail!
  cursor: String!
}

enum TrailOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  slug_ASC
  slug_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  trailheadCoords_ASC
  trailheadCoords_DESC
  address_ASC
  address_DESC
  avgDifficulty_ASC
  avgDifficulty_DESC
  avgRatings_ASC
  avgRatings_DESC
  currentConditions_ASC
  currentConditions_DESC
  conditionsLastReported_ASC
  conditionsLastReported_DESC
  favoriteCount_ASC
  favoriteCount_DESC
}

type TrailPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
}

input TrailScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  trailheadCoords: String
  trailheadCoords_not: String
  trailheadCoords_in: [String!]
  trailheadCoords_not_in: [String!]
  trailheadCoords_lt: String
  trailheadCoords_lte: String
  trailheadCoords_gt: String
  trailheadCoords_gte: String
  trailheadCoords_contains: String
  trailheadCoords_not_contains: String
  trailheadCoords_starts_with: String
  trailheadCoords_not_starts_with: String
  trailheadCoords_ends_with: String
  trailheadCoords_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  avgDifficulty: TrailDifficulty
  avgDifficulty_not: TrailDifficulty
  avgDifficulty_in: [TrailDifficulty!]
  avgDifficulty_not_in: [TrailDifficulty!]
  avgRatings: Float
  avgRatings_not: Float
  avgRatings_in: [Float!]
  avgRatings_not_in: [Float!]
  avgRatings_lt: Float
  avgRatings_lte: Float
  avgRatings_gt: Float
  avgRatings_gte: Float
  currentConditions: String
  currentConditions_not: String
  currentConditions_in: [String!]
  currentConditions_not_in: [String!]
  currentConditions_lt: String
  currentConditions_lte: String
  currentConditions_gt: String
  currentConditions_gte: String
  currentConditions_contains: String
  currentConditions_not_contains: String
  currentConditions_starts_with: String
  currentConditions_not_starts_with: String
  currentConditions_ends_with: String
  currentConditions_not_ends_with: String
  conditionsLastReported: DateTime
  conditionsLastReported_not: DateTime
  conditionsLastReported_in: [DateTime!]
  conditionsLastReported_not_in: [DateTime!]
  conditionsLastReported_lt: DateTime
  conditionsLastReported_lte: DateTime
  conditionsLastReported_gt: DateTime
  conditionsLastReported_gte: DateTime
  favoriteCount: Int
  favoriteCount_not: Int
  favoriteCount_in: [Int!]
  favoriteCount_not_in: [Int!]
  favoriteCount_lt: Int
  favoriteCount_lte: Int
  favoriteCount_gt: Int
  favoriteCount_gte: Int
  AND: [TrailScalarWhereInput!]
  OR: [TrailScalarWhereInput!]
  NOT: [TrailScalarWhereInput!]
}

type TrailSubscriptionPayload {
  mutation: MutationType!
  node: Trail
  updatedFields: [String!]
  previousValues: TrailPreviousValues
}

input TrailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TrailWhereInput
  AND: [TrailSubscriptionWhereInput!]
  OR: [TrailSubscriptionWhereInput!]
  NOT: [TrailSubscriptionWhereInput!]
}

input TrailUpdateInput {
  slug: String
  name: String
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventUpdateManyWithoutTrailInput
  visitors: UserUpdateManyWithoutTrailsVisitedInput
  runReports: RunReportUpdateManyWithoutTrailInput
}

input TrailUpdateManyDataInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
}

input TrailUpdateManyMutationInput {
  slug: String
  name: String
  description: String
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
}

input TrailUpdateManyWithoutVisitorsInput {
  create: [TrailCreateWithoutVisitorsInput!]
  delete: [TrailWhereUniqueInput!]
  connect: [TrailWhereUniqueInput!]
  set: [TrailWhereUniqueInput!]
  disconnect: [TrailWhereUniqueInput!]
  update: [TrailUpdateWithWhereUniqueWithoutVisitorsInput!]
  upsert: [TrailUpsertWithWhereUniqueWithoutVisitorsInput!]
  deleteMany: [TrailScalarWhereInput!]
  updateMany: [TrailUpdateManyWithWhereNestedInput!]
}

input TrailUpdateManyWithWhereNestedInput {
  where: TrailScalarWhereInput!
  data: TrailUpdateManyDataInput!
}

input TrailUpdateOneRequiredWithoutRunReportsInput {
  create: TrailCreateWithoutRunReportsInput
  update: TrailUpdateWithoutRunReportsDataInput
  upsert: TrailUpsertWithoutRunReportsInput
  connect: TrailWhereUniqueInput
}

input TrailUpdateOneWithoutPastEventsInput {
  create: TrailCreateWithoutPastEventsInput
  update: TrailUpdateWithoutPastEventsDataInput
  upsert: TrailUpsertWithoutPastEventsInput
  delete: Boolean
  disconnect: Boolean
  connect: TrailWhereUniqueInput
}

input TrailUpdateWithoutPastEventsDataInput {
  slug: String
  name: String
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  visitors: UserUpdateManyWithoutTrailsVisitedInput
  runReports: RunReportUpdateManyWithoutTrailInput
}

input TrailUpdateWithoutRunReportsDataInput {
  slug: String
  name: String
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventUpdateManyWithoutTrailInput
  visitors: UserUpdateManyWithoutTrailsVisitedInput
}

input TrailUpdateWithoutVisitorsDataInput {
  slug: String
  name: String
  description: String
  featuredImage: CloudinaryImageUpdateOneInput
  trailheadCoords: String
  address: String
  avgDifficulty: TrailDifficulty
  avgRatings: Float
  currentConditions: String
  conditionsLastReported: DateTime
  favoriteCount: Int
  pastEvents: EventUpdateManyWithoutTrailInput
  runReports: RunReportUpdateManyWithoutTrailInput
}

input TrailUpdateWithWhereUniqueWithoutVisitorsInput {
  where: TrailWhereUniqueInput!
  data: TrailUpdateWithoutVisitorsDataInput!
}

input TrailUpsertWithoutPastEventsInput {
  update: TrailUpdateWithoutPastEventsDataInput!
  create: TrailCreateWithoutPastEventsInput!
}

input TrailUpsertWithoutRunReportsInput {
  update: TrailUpdateWithoutRunReportsDataInput!
  create: TrailCreateWithoutRunReportsInput!
}

input TrailUpsertWithWhereUniqueWithoutVisitorsInput {
  where: TrailWhereUniqueInput!
  update: TrailUpdateWithoutVisitorsDataInput!
  create: TrailCreateWithoutVisitorsInput!
}

input TrailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  featuredImage: CloudinaryImageWhereInput
  trailheadCoords: String
  trailheadCoords_not: String
  trailheadCoords_in: [String!]
  trailheadCoords_not_in: [String!]
  trailheadCoords_lt: String
  trailheadCoords_lte: String
  trailheadCoords_gt: String
  trailheadCoords_gte: String
  trailheadCoords_contains: String
  trailheadCoords_not_contains: String
  trailheadCoords_starts_with: String
  trailheadCoords_not_starts_with: String
  trailheadCoords_ends_with: String
  trailheadCoords_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  avgDifficulty: TrailDifficulty
  avgDifficulty_not: TrailDifficulty
  avgDifficulty_in: [TrailDifficulty!]
  avgDifficulty_not_in: [TrailDifficulty!]
  avgRatings: Float
  avgRatings_not: Float
  avgRatings_in: [Float!]
  avgRatings_not_in: [Float!]
  avgRatings_lt: Float
  avgRatings_lte: Float
  avgRatings_gt: Float
  avgRatings_gte: Float
  currentConditions: String
  currentConditions_not: String
  currentConditions_in: [String!]
  currentConditions_not_in: [String!]
  currentConditions_lt: String
  currentConditions_lte: String
  currentConditions_gt: String
  currentConditions_gte: String
  currentConditions_contains: String
  currentConditions_not_contains: String
  currentConditions_starts_with: String
  currentConditions_not_starts_with: String
  currentConditions_ends_with: String
  currentConditions_not_ends_with: String
  conditionsLastReported: DateTime
  conditionsLastReported_not: DateTime
  conditionsLastReported_in: [DateTime!]
  conditionsLastReported_not_in: [DateTime!]
  conditionsLastReported_lt: DateTime
  conditionsLastReported_lte: DateTime
  conditionsLastReported_gt: DateTime
  conditionsLastReported_gte: DateTime
  favoriteCount: Int
  favoriteCount_not: Int
  favoriteCount_in: [Int!]
  favoriteCount_not_in: [Int!]
  favoriteCount_lt: Int
  favoriteCount_lte: Int
  favoriteCount_gt: Int
  favoriteCount_gte: Int
  pastEvents_every: EventWhereInput
  pastEvents_some: EventWhereInput
  pastEvents_none: EventWhereInput
  visitors_every: UserWhereInput
  visitors_some: UserWhereInput
  visitors_none: UserWhereInput
  runReports_every: RunReportWhereInput
  runReports_some: RunReportWhereInput
  runReports_none: RunReportWhereInput
  AND: [TrailWhereInput!]
  OR: [TrailWhereInput!]
  NOT: [TrailWhereInput!]
}

input TrailWhereUniqueInput {
  id: ID
  slug: String
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfo
  preferences: Preference
  userMeta: UserMeta
  avatar: CloudinaryImage
  isCharterMember: Boolean
  rig: RigImage
  vehicle: Vehicle
  title: Title
  role: Role!
  accountStatus: AccountStatus!
  accountType: AccountType!
  office: Office
  candidateFor(where: BallotWhereInput, orderBy: BallotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ballot!]
  votesReceived(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  votedFor(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  comfortLevel: String
  activityLog(where: ActivityLogItemWhereInput, orderBy: ActivityLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActivityLogItem!]
  membershipLog(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MembershipLogItem!]
  membershipLogContributions(where: MembershipLogItemWhereInput, orderBy: MembershipLogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MembershipLogItem!]
  eventsCreated(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  eventsRSVPd(where: RSVPWhereInput, orderBy: RSVPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RSVP!]
  eventsHosted(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  trailsVisited(where: TrailWhereInput, orderBy: TrailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trail!]
  bandaids(where: BandaidWhereInput, orderBy: BandaidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bandaid!]
  runReportsLogged(where: RunReportWhereInput, orderBy: RunReportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunReport!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateManyWithoutCandidateForInput {
  create: [UserCreateWithoutCandidateForInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTrailsVisitedInput {
  create: [UserCreateWithoutTrailsVisitedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutActivityLogInput {
  create: UserCreateWithoutActivityLogInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBandaidsInput {
  create: UserCreateWithoutBandaidsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutContactInfoInput {
  create: UserCreateWithoutContactInfoInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsCreatedInput {
  create: UserCreateWithoutEventsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsHostedInput {
  create: UserCreateWithoutEventsHostedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsRSVPdInput {
  create: UserCreateWithoutEventsRSVPdInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMembershipLogContributionsInput {
  create: UserCreateWithoutMembershipLogContributionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMembershipLogInput {
  create: UserCreateWithoutMembershipLogInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRunReportsLoggedInput {
  create: UserCreateWithoutRunReportsLoggedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserMetaInput {
  create: UserCreateWithoutUserMetaInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotedForInput {
  create: UserCreateWithoutVotedForInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesReceivedInput {
  create: UserCreateWithoutVotesReceivedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutActivityLogInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutBandaidsInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutCandidateForInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutContactInfoInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutEventsCreatedInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutEventsHostedInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutEventsRSVPdInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutMembershipLogContributionsInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutMembershipLogInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutPreferencesInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutRunReportsLoggedInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
}

input UserCreateWithoutTrailsVisitedInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutUserMetaInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutVotedForInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votesReceived: VoteCreateManyWithoutCandidateInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

input UserCreateWithoutVotesReceivedInput {
  id: ID
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoCreateOneWithoutUserInput
  preferences: PreferenceCreateOneWithoutUserInput
  userMeta: UserMetaCreateOneWithoutUserInput
  avatar: CloudinaryImageCreateOneInput
  isCharterMember: Boolean
  rig: RigImageCreateOneInput
  vehicle: VehicleCreateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotCreateManyWithoutCandidatesInput
  votedFor: VoteCreateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemCreateManyWithoutUserInput
  membershipLog: MembershipLogItemCreateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemCreateManyWithoutLoggerInput
  eventsCreated: EventCreateManyWithoutCreatorInput
  eventsRSVPd: RSVPCreateManyWithoutMemberInput
  eventsHosted: EventCreateManyWithoutHostInput
  trailsVisited: TrailCreateManyWithoutVisitorsInput
  bandaids: BandaidCreateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportCreateManyWithoutReporterInput
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserMeta {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  user: User
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

type UserMetaConnection {
  pageInfo: PageInfo!
  edges: [UserMetaEdge]!
  aggregate: AggregateUserMeta!
}

input UserMetaCreateInput {
  id: ID
  user: UserCreateOneWithoutUserMetaInput
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

input UserMetaCreateOneWithoutUserInput {
  create: UserMetaCreateWithoutUserInput
  connect: UserMetaWhereUniqueInput
}

input UserMetaCreateWithoutUserInput {
  id: ID
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

type UserMetaEdge {
  node: UserMeta!
  cursor: String!
}

enum UserMetaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  emailVerified_ASC
  emailVerified_DESC
  firstLoginComplete_ASC
  firstLoginComplete_DESC
  accountSetupComplete_ASC
  accountSetupComplete_DESC
  oldSitemigrationComplete_ASC
  oldSitemigrationComplete_DESC
}

type UserMetaPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime!
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

type UserMetaSubscriptionPayload {
  mutation: MutationType!
  node: UserMeta
  updatedFields: [String!]
  previousValues: UserMetaPreviousValues
}

input UserMetaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserMetaWhereInput
  AND: [UserMetaSubscriptionWhereInput!]
  OR: [UserMetaSubscriptionWhereInput!]
  NOT: [UserMetaSubscriptionWhereInput!]
}

input UserMetaUpdateInput {
  user: UserUpdateOneWithoutUserMetaInput
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

input UserMetaUpdateManyMutationInput {
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

input UserMetaUpdateOneWithoutUserInput {
  create: UserMetaCreateWithoutUserInput
  update: UserMetaUpdateWithoutUserDataInput
  upsert: UserMetaUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: UserMetaWhereUniqueInput
}

input UserMetaUpdateWithoutUserDataInput {
  emailVerified: Boolean
  firstLoginComplete: Boolean
  accountSetupComplete: Boolean
  oldSitemigrationComplete: Boolean
}

input UserMetaUpsertWithoutUserInput {
  update: UserMetaUpdateWithoutUserDataInput!
  create: UserMetaCreateWithoutUserInput!
}

input UserMetaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  emailVerified: Boolean
  emailVerified_not: Boolean
  firstLoginComplete: Boolean
  firstLoginComplete_not: Boolean
  accountSetupComplete: Boolean
  accountSetupComplete_not: Boolean
  oldSitemigrationComplete: Boolean
  oldSitemigrationComplete_not: Boolean
  AND: [UserMetaWhereInput!]
  OR: [UserMetaWhereInput!]
  NOT: [UserMetaWhereInput!]
}

input UserMetaWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  joined_ASC
  joined_DESC
  lastLogin_ASC
  lastLogin_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  birthdate_ASC
  birthdate_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  isCharterMember_ASC
  isCharterMember_DESC
  title_ASC
  title_DESC
  role_ASC
  role_DESC
  accountStatus_ASC
  accountStatus_DESC
  accountType_ASC
  accountType_DESC
  office_ASC
  office_DESC
  comfortLevel_ASC
  comfortLevel_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  joined: DateTime
  lastLogin: DateTime
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  birthdate: DateTime
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  isCharterMember: Boolean
  title: Title
  role: Role!
  accountStatus: AccountStatus!
  accountType: AccountType!
  office: Office
  comfortLevel: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  joined: DateTime
  joined_not: DateTime
  joined_in: [DateTime!]
  joined_not_in: [DateTime!]
  joined_lt: DateTime
  joined_lte: DateTime
  joined_gt: DateTime
  joined_gte: DateTime
  lastLogin: DateTime
  lastLogin_not: DateTime
  lastLogin_in: [DateTime!]
  lastLogin_not_in: [DateTime!]
  lastLogin_lt: DateTime
  lastLogin_lte: DateTime
  lastLogin_gt: DateTime
  lastLogin_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  isCharterMember: Boolean
  isCharterMember_not: Boolean
  title: Title
  title_not: Title
  title_in: [Title!]
  title_not_in: [Title!]
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  accountStatus: AccountStatus
  accountStatus_not: AccountStatus
  accountStatus_in: [AccountStatus!]
  accountStatus_not_in: [AccountStatus!]
  accountType: AccountType
  accountType_not: AccountType
  accountType_in: [AccountType!]
  accountType_not_in: [AccountType!]
  office: Office
  office_not: Office
  office_in: [Office!]
  office_not_in: [Office!]
  comfortLevel: String
  comfortLevel_not: String
  comfortLevel_in: [String!]
  comfortLevel_not_in: [String!]
  comfortLevel_lt: String
  comfortLevel_lte: String
  comfortLevel_gt: String
  comfortLevel_gte: String
  comfortLevel_contains: String
  comfortLevel_not_contains: String
  comfortLevel_starts_with: String
  comfortLevel_not_starts_with: String
  comfortLevel_ends_with: String
  comfortLevel_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateManyDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
}

input UserUpdateManyMutationInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  isCharterMember: Boolean
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  comfortLevel: String
}

input UserUpdateManyWithoutCandidateForInput {
  create: [UserCreateWithoutCandidateForInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCandidateForInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCandidateForInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutTrailsVisitedInput {
  create: [UserCreateWithoutTrailsVisitedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTrailsVisitedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTrailsVisitedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutActivityLogInput {
  create: UserCreateWithoutActivityLogInput
  update: UserUpdateWithoutActivityLogDataInput
  upsert: UserUpsertWithoutActivityLogInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEventsCreatedInput {
  create: UserCreateWithoutEventsCreatedInput
  update: UserUpdateWithoutEventsCreatedDataInput
  upsert: UserUpsertWithoutEventsCreatedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutEventsRSVPdInput {
  create: UserCreateWithoutEventsRSVPdInput
  update: UserUpdateWithoutEventsRSVPdDataInput
  upsert: UserUpsertWithoutEventsRSVPdInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMembershipLogInput {
  create: UserCreateWithoutMembershipLogInput
  update: UserUpdateWithoutMembershipLogDataInput
  upsert: UserUpsertWithoutMembershipLogInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRunReportsLoggedInput {
  create: UserCreateWithoutRunReportsLoggedInput
  update: UserUpdateWithoutRunReportsLoggedDataInput
  upsert: UserUpsertWithoutRunReportsLoggedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutVotedForInput {
  create: UserCreateWithoutVotedForInput
  update: UserUpdateWithoutVotedForDataInput
  upsert: UserUpsertWithoutVotedForInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutBandaidsInput {
  create: UserCreateWithoutBandaidsInput
  update: UserUpdateWithoutBandaidsDataInput
  upsert: UserUpsertWithoutBandaidsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutContactInfoInput {
  create: UserCreateWithoutContactInfoInput
  update: UserUpdateWithoutContactInfoDataInput
  upsert: UserUpsertWithoutContactInfoInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutEventsHostedInput {
  create: UserCreateWithoutEventsHostedInput
  update: UserUpdateWithoutEventsHostedDataInput
  upsert: UserUpsertWithoutEventsHostedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutMembershipLogContributionsInput {
  create: UserCreateWithoutMembershipLogContributionsInput
  update: UserUpdateWithoutMembershipLogContributionsDataInput
  upsert: UserUpsertWithoutMembershipLogContributionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPreferencesInput {
  create: UserCreateWithoutPreferencesInput
  update: UserUpdateWithoutPreferencesDataInput
  upsert: UserUpsertWithoutPreferencesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserMetaInput {
  create: UserCreateWithoutUserMetaInput
  update: UserUpdateWithoutUserMetaDataInput
  upsert: UserUpsertWithoutUserMetaInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutVotesReceivedInput {
  create: UserCreateWithoutVotesReceivedInput
  update: UserUpdateWithoutVotesReceivedDataInput
  upsert: UserUpsertWithoutVotesReceivedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutActivityLogDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutBandaidsDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutCandidateForDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutContactInfoDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutEventsCreatedDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutEventsHostedDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutEventsRSVPdDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutMembershipLogContributionsDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutMembershipLogDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutPreferencesDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutRunReportsLoggedDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
}

input UserUpdateWithoutTrailsVisitedDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutUserMetaDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutVotedForDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votesReceived: VoteUpdateManyWithoutCandidateInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithoutVotesReceivedDataInput {
  joined: DateTime
  lastLogin: DateTime
  firstName: String
  lastName: String
  email: String
  gender: Gender
  birthdate: DateTime
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  contactInfo: ContactInfoUpdateOneWithoutUserInput
  preferences: PreferenceUpdateOneWithoutUserInput
  userMeta: UserMetaUpdateOneWithoutUserInput
  avatar: CloudinaryImageUpdateOneInput
  isCharterMember: Boolean
  rig: RigImageUpdateOneInput
  vehicle: VehicleUpdateOneInput
  title: Title
  role: Role
  accountStatus: AccountStatus
  accountType: AccountType
  office: Office
  candidateFor: BallotUpdateManyWithoutCandidatesInput
  votedFor: VoteUpdateManyWithoutVoterInput
  comfortLevel: String
  activityLog: ActivityLogItemUpdateManyWithoutUserInput
  membershipLog: MembershipLogItemUpdateManyWithoutUserInput
  membershipLogContributions: MembershipLogItemUpdateManyWithoutLoggerInput
  eventsCreated: EventUpdateManyWithoutCreatorInput
  eventsRSVPd: RSVPUpdateManyWithoutMemberInput
  eventsHosted: EventUpdateManyWithoutHostInput
  trailsVisited: TrailUpdateManyWithoutVisitorsInput
  bandaids: BandaidUpdateManyWithoutMemberInvolvedInput
  runReportsLogged: RunReportUpdateManyWithoutReporterInput
}

input UserUpdateWithWhereUniqueWithoutCandidateForInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCandidateForDataInput!
}

input UserUpdateWithWhereUniqueWithoutTrailsVisitedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTrailsVisitedDataInput!
}

input UserUpsertWithoutActivityLogInput {
  update: UserUpdateWithoutActivityLogDataInput!
  create: UserCreateWithoutActivityLogInput!
}

input UserUpsertWithoutBandaidsInput {
  update: UserUpdateWithoutBandaidsDataInput!
  create: UserCreateWithoutBandaidsInput!
}

input UserUpsertWithoutContactInfoInput {
  update: UserUpdateWithoutContactInfoDataInput!
  create: UserCreateWithoutContactInfoInput!
}

input UserUpsertWithoutEventsCreatedInput {
  update: UserUpdateWithoutEventsCreatedDataInput!
  create: UserCreateWithoutEventsCreatedInput!
}

input UserUpsertWithoutEventsHostedInput {
  update: UserUpdateWithoutEventsHostedDataInput!
  create: UserCreateWithoutEventsHostedInput!
}

input UserUpsertWithoutEventsRSVPdInput {
  update: UserUpdateWithoutEventsRSVPdDataInput!
  create: UserCreateWithoutEventsRSVPdInput!
}

input UserUpsertWithoutMembershipLogContributionsInput {
  update: UserUpdateWithoutMembershipLogContributionsDataInput!
  create: UserCreateWithoutMembershipLogContributionsInput!
}

input UserUpsertWithoutMembershipLogInput {
  update: UserUpdateWithoutMembershipLogDataInput!
  create: UserCreateWithoutMembershipLogInput!
}

input UserUpsertWithoutPreferencesInput {
  update: UserUpdateWithoutPreferencesDataInput!
  create: UserCreateWithoutPreferencesInput!
}

input UserUpsertWithoutRunReportsLoggedInput {
  update: UserUpdateWithoutRunReportsLoggedDataInput!
  create: UserCreateWithoutRunReportsLoggedInput!
}

input UserUpsertWithoutUserMetaInput {
  update: UserUpdateWithoutUserMetaDataInput!
  create: UserCreateWithoutUserMetaInput!
}

input UserUpsertWithoutVotedForInput {
  update: UserUpdateWithoutVotedForDataInput!
  create: UserCreateWithoutVotedForInput!
}

input UserUpsertWithoutVotesReceivedInput {
  update: UserUpdateWithoutVotesReceivedDataInput!
  create: UserCreateWithoutVotesReceivedInput!
}

input UserUpsertWithWhereUniqueWithoutCandidateForInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCandidateForDataInput!
  create: UserCreateWithoutCandidateForInput!
}

input UserUpsertWithWhereUniqueWithoutTrailsVisitedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTrailsVisitedDataInput!
  create: UserCreateWithoutTrailsVisitedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  joined: DateTime
  joined_not: DateTime
  joined_in: [DateTime!]
  joined_not_in: [DateTime!]
  joined_lt: DateTime
  joined_lte: DateTime
  joined_gt: DateTime
  joined_gte: DateTime
  lastLogin: DateTime
  lastLogin_not: DateTime
  lastLogin_in: [DateTime!]
  lastLogin_not_in: [DateTime!]
  lastLogin_lt: DateTime
  lastLogin_lte: DateTime
  lastLogin_gt: DateTime
  lastLogin_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  birthdate: DateTime
  birthdate_not: DateTime
  birthdate_in: [DateTime!]
  birthdate_not_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  contactInfo: ContactInfoWhereInput
  preferences: PreferenceWhereInput
  userMeta: UserMetaWhereInput
  avatar: CloudinaryImageWhereInput
  isCharterMember: Boolean
  isCharterMember_not: Boolean
  rig: RigImageWhereInput
  vehicle: VehicleWhereInput
  title: Title
  title_not: Title
  title_in: [Title!]
  title_not_in: [Title!]
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  accountStatus: AccountStatus
  accountStatus_not: AccountStatus
  accountStatus_in: [AccountStatus!]
  accountStatus_not_in: [AccountStatus!]
  accountType: AccountType
  accountType_not: AccountType
  accountType_in: [AccountType!]
  accountType_not_in: [AccountType!]
  office: Office
  office_not: Office
  office_in: [Office!]
  office_not_in: [Office!]
  candidateFor_every: BallotWhereInput
  candidateFor_some: BallotWhereInput
  candidateFor_none: BallotWhereInput
  votesReceived_every: VoteWhereInput
  votesReceived_some: VoteWhereInput
  votesReceived_none: VoteWhereInput
  votedFor_every: VoteWhereInput
  votedFor_some: VoteWhereInput
  votedFor_none: VoteWhereInput
  comfortLevel: String
  comfortLevel_not: String
  comfortLevel_in: [String!]
  comfortLevel_not_in: [String!]
  comfortLevel_lt: String
  comfortLevel_lte: String
  comfortLevel_gt: String
  comfortLevel_gte: String
  comfortLevel_contains: String
  comfortLevel_not_contains: String
  comfortLevel_starts_with: String
  comfortLevel_not_starts_with: String
  comfortLevel_ends_with: String
  comfortLevel_not_ends_with: String
  activityLog_every: ActivityLogItemWhereInput
  activityLog_some: ActivityLogItemWhereInput
  activityLog_none: ActivityLogItemWhereInput
  membershipLog_every: MembershipLogItemWhereInput
  membershipLog_some: MembershipLogItemWhereInput
  membershipLog_none: MembershipLogItemWhereInput
  membershipLogContributions_every: MembershipLogItemWhereInput
  membershipLogContributions_some: MembershipLogItemWhereInput
  membershipLogContributions_none: MembershipLogItemWhereInput
  eventsCreated_every: EventWhereInput
  eventsCreated_some: EventWhereInput
  eventsCreated_none: EventWhereInput
  eventsRSVPd_every: RSVPWhereInput
  eventsRSVPd_some: RSVPWhereInput
  eventsRSVPd_none: RSVPWhereInput
  eventsHosted_every: EventWhereInput
  eventsHosted_some: EventWhereInput
  eventsHosted_none: EventWhereInput
  trailsVisited_every: TrailWhereInput
  trailsVisited_some: TrailWhereInput
  trailsVisited_none: TrailWhereInput
  bandaids_every: BandaidWhereInput
  bandaids_some: BandaidWhereInput
  bandaids_none: BandaidWhereInput
  runReportsLogged_every: RunReportWhereInput
  runReportsLogged_some: RunReportWhereInput
  runReportsLogged_none: RunReportWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
  office: Office
}

type Vehicle {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: Int!
  make: String!
  model: String!
  name: String
  trim: String
  image: CloudinaryImage
  outfitLevel: OutfitLevel
  mods: [String!]!
}

type VehicleConnection {
  pageInfo: PageInfo!
  edges: [VehicleEdge]!
  aggregate: AggregateVehicle!
}

input VehicleCreateInput {
  id: ID
  year: Int!
  make: String!
  model: String!
  name: String
  trim: String
  image: CloudinaryImageCreateOneInput
  outfitLevel: OutfitLevel
  mods: VehicleCreatemodsInput
}

input VehicleCreatemodsInput {
  set: [String!]
}

input VehicleCreateOneInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
}

type VehicleEdge {
  node: Vehicle!
  cursor: String!
}

enum VehicleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  year_ASC
  year_DESC
  make_ASC
  make_DESC
  model_ASC
  model_DESC
  name_ASC
  name_DESC
  trim_ASC
  trim_DESC
  outfitLevel_ASC
  outfitLevel_DESC
}

type VehiclePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: Int!
  make: String!
  model: String!
  name: String
  trim: String
  outfitLevel: OutfitLevel
  mods: [String!]!
}

type VehicleSubscriptionPayload {
  mutation: MutationType!
  node: Vehicle
  updatedFields: [String!]
  previousValues: VehiclePreviousValues
}

input VehicleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VehicleWhereInput
  AND: [VehicleSubscriptionWhereInput!]
  OR: [VehicleSubscriptionWhereInput!]
  NOT: [VehicleSubscriptionWhereInput!]
}

input VehicleUpdateDataInput {
  year: Int
  make: String
  model: String
  name: String
  trim: String
  image: CloudinaryImageUpdateOneInput
  outfitLevel: OutfitLevel
  mods: VehicleUpdatemodsInput
}

input VehicleUpdateInput {
  year: Int
  make: String
  model: String
  name: String
  trim: String
  image: CloudinaryImageUpdateOneInput
  outfitLevel: OutfitLevel
  mods: VehicleUpdatemodsInput
}

input VehicleUpdateManyMutationInput {
  year: Int
  make: String
  model: String
  name: String
  trim: String
  outfitLevel: OutfitLevel
  mods: VehicleUpdatemodsInput
}

input VehicleUpdatemodsInput {
  set: [String!]
}

input VehicleUpdateOneInput {
  create: VehicleCreateInput
  update: VehicleUpdateDataInput
  upsert: VehicleUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: VehicleWhereUniqueInput
}

input VehicleUpsertNestedInput {
  update: VehicleUpdateDataInput!
  create: VehicleCreateInput!
}

input VehicleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  make: String
  make_not: String
  make_in: [String!]
  make_not_in: [String!]
  make_lt: String
  make_lte: String
  make_gt: String
  make_gte: String
  make_contains: String
  make_not_contains: String
  make_starts_with: String
  make_not_starts_with: String
  make_ends_with: String
  make_not_ends_with: String
  model: String
  model_not: String
  model_in: [String!]
  model_not_in: [String!]
  model_lt: String
  model_lte: String
  model_gt: String
  model_gte: String
  model_contains: String
  model_not_contains: String
  model_starts_with: String
  model_not_starts_with: String
  model_ends_with: String
  model_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  trim: String
  trim_not: String
  trim_in: [String!]
  trim_not_in: [String!]
  trim_lt: String
  trim_lte: String
  trim_gt: String
  trim_gte: String
  trim_contains: String
  trim_not_contains: String
  trim_starts_with: String
  trim_not_starts_with: String
  trim_ends_with: String
  trim_not_ends_with: String
  image: CloudinaryImageWhereInput
  outfitLevel: OutfitLevel
  outfitLevel_not: OutfitLevel
  outfitLevel_in: [OutfitLevel!]
  outfitLevel_not_in: [OutfitLevel!]
  AND: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
}

input VehicleWhereUniqueInput {
  id: ID
}

type Vote {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  ballot: Ballot!
  candidate: User
  voter: User!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  ballot: BallotCreateOneWithoutVotesInput!
  candidate: UserCreateOneWithoutVotesReceivedInput
  voter: UserCreateOneWithoutVotedForInput!
}

input VoteCreateManyWithoutBallotInput {
  create: [VoteCreateWithoutBallotInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutCandidateInput {
  create: [VoteCreateWithoutCandidateInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutBallotInput {
  id: ID
  candidate: UserCreateOneWithoutVotesReceivedInput
  voter: UserCreateOneWithoutVotedForInput!
}

input VoteCreateWithoutCandidateInput {
  id: ID
  ballot: BallotCreateOneWithoutVotesInput!
  voter: UserCreateOneWithoutVotedForInput!
}

input VoteCreateWithoutVoterInput {
  id: ID
  ballot: BallotCreateOneWithoutVotesInput!
  candidate: UserCreateOneWithoutVotesReceivedInput
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  candidate: UserUpdateOneWithoutVotesReceivedInput
  voter: UserUpdateOneRequiredWithoutVotedForInput
}

input VoteUpdateManyWithoutBallotInput {
  create: [VoteCreateWithoutBallotInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutBallotInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutBallotInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutCandidateInput {
  create: [VoteCreateWithoutCandidateInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutCandidateInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutCandidateInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutVoterInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutVoterInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateWithoutBallotDataInput {
  candidate: UserUpdateOneWithoutVotesReceivedInput
  voter: UserUpdateOneRequiredWithoutVotedForInput
}

input VoteUpdateWithoutCandidateDataInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  voter: UserUpdateOneRequiredWithoutVotedForInput
}

input VoteUpdateWithoutVoterDataInput {
  ballot: BallotUpdateOneRequiredWithoutVotesInput
  candidate: UserUpdateOneWithoutVotesReceivedInput
}

input VoteUpdateWithWhereUniqueWithoutBallotInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutBallotDataInput!
}

input VoteUpdateWithWhereUniqueWithoutCandidateInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCandidateDataInput!
}

input VoteUpdateWithWhereUniqueWithoutVoterInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutVoterDataInput!
}

input VoteUpsertWithWhereUniqueWithoutBallotInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutBallotDataInput!
  create: VoteCreateWithoutBallotInput!
}

input VoteUpsertWithWhereUniqueWithoutCandidateInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCandidateDataInput!
  create: VoteCreateWithoutCandidateInput!
}

input VoteUpsertWithWhereUniqueWithoutVoterInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutVoterDataInput!
  create: VoteCreateWithoutVoterInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  ballot: BallotWhereInput
  candidate: UserWhereInput
  voter: UserWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    